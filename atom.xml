<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog of Scheme</title>
  
  <subtitle>Funny of Computer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://marryton007.github.io/"/>
  <updated>2022-05-21T02:53:38.016Z</updated>
  <id>http://marryton007.github.io/</id>
  
  <author>
    <name>Scheme J</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阅读Android框架源码</title>
    <link href="http://marryton007.github.io/2022/05/20/embedded/read-android-framework-code/"/>
    <id>http://marryton007.github.io/2022/05/20/embedded/read-android-framework-code/</id>
    <published>2022-05-20T06:17:00.000Z</published>
    <updated>2022-05-21T02:53:38.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>之前一直都是看Kernel源码，网上有很多好用的工具，如：</p><ul><li><a href="https://elixir.bootlin.com/linux/latest/source" target="_blank" rel="noopener">elixir</a></li><li><a href="https://sourcegraph.com/github.com/torvalds/linux" target="_blank" rel="noopener">sourcegraph+ github</a></li><li><a href="https://martins3.github.io/My-Linux-Config/docs/nvim.html" target="_blank" rel="noopener">vim + ccls</a></li></ul><p>最近，因为要跟踪Android框架某个流程，须查看Android的框架源码，尝试过几种方案后，最终选择了<a href="https://zhuanlan.zhihu.com/p/139200172" target="_blank" rel="noopener">rclone</a>+Android Studio，先说一下工作环境。</p><h2 id="2-环境"><a href="#2-环境" class="headerlink" title="2. 环境"></a>2. 环境</h2><p>Android 源码存放在Linux服务器上，之所以放在服务器上，而不是本地PC，主要是利用服务器性能和存储空间，毕竟Android框架代码太大了，压缩过后大约50G，解压出来100G，编译过后200G。平时工作时，使用 <a href="https://github.com/kingToolbox/WindTerm" target="_blank" rel="noopener">windterm</a>连到服务器，使用<a href="https://martins3.github.io/My-Linux-Config/docs/nvim.html" target="_blank" rel="noopener">vim+ccls</a>就可以完成日常工作了。</p><h2 id="3-尝试"><a href="#3-尝试" class="headerlink" title="3. 尝试"></a>3. 尝试</h2><p>因为要阅读Java代码，这里先后使用了</p><ul><li>vscode(remote ssh)+java</li><li>rclone + source insight</li><li>Android stuido(linux版) + vcxSrv</li><li>rclone + Android studio</li></ul><p>其中，vscode不能跳转，估计是不能直接把某个目录加入vscode中，source insight搜索文件倒是好用，但跳转函数定义不是很好用。这些支持得最好的还是Android studio，开始的时候尝试在Linux上运行Android studio，再通过vcxSrv将图形界面展示到Window上，但一些快捷键不能使用，只能通过鼠标点击，效率大大降低。这里使用<a href="https://zhuanlan.zhihu.com/p/139200172" target="_blank" rel="noopener">rclone</a>的作用是将Linux上某个目录直接映射到Windows上的虚拟磁盘上，因为我们编译的出来的Android固件比较大，不想每次都拷贝到本地，再烧录到开发上，使用<a href="https://zhuanlan.zhihu.com/p/139200172" target="_blank" rel="noopener">rclone</a>后，就可以直接指定从虚拟磁盘上下载并烧录Android固件了。</p><h2 id="4-虚拟磁盘rclone"><a href="#4-虚拟磁盘rclone" class="headerlink" title="4. 虚拟磁盘rclone"></a>4. 虚拟磁盘rclone</h2><p>在使用<a href="https://zhuanlan.zhihu.com/p/139200172" target="_blank" rel="noopener">rclone</a>前，使用过</p><ul><li><a href="https://github.com/evsar3/sshfs-win-manager" target="_blank" rel="noopener">sshfs-win-manager</a></li><li><a href="https://www.nsoftware.com/sftp/drive/" target="_blank" rel="noopener">SFTP drive</a></li></ul><p><a href="https://github.com/evsar3/sshfs-win-manager" target="_blank" rel="noopener">sshfs-win-manager</a>最大的问题是不能直接下载比较大的文件，比如2G</p><p><a href="https://www.nsoftware.com/sftp/drive/" target="_blank" rel="noopener">SFTP drive</a>倒是可以下载大文件，但免费版每次只能影射一个虚拟磁盘，这让有多台服务器的同学怎么办？</p><p><a href="https://zhuanlan.zhihu.com/p/139200172" target="_blank" rel="noopener">rclone</a> 解决了上面的问题，并且没有广告，这么好的东东哪里去找，果断替换。</p><h3 id="4-1-安装"><a href="#4-1-安装" class="headerlink" title="4.1 安装"></a>4.1 安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install rclone</span><br></pre></td></tr></table></figure><p>首次使用需要配置一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone config</span><br></pre></td></tr></table></figure><p>配置文件内容如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">252</span>]</span><br><span class="line">type = sftp</span><br><span class="line">host = 192.168.200.252</span><br><span class="line">user = example</span><br><span class="line">key_file = ~/.ssh/id_rsa.pem</span><br><span class="line">md5sum_command = md5sum</span><br><span class="line">sha1sum_command = sha1sum</span><br><span class="line"></span><br><span class="line">[<span class="number">253</span>]</span><br><span class="line">type = sftp</span><br><span class="line">host = 192.168.200.253</span><br><span class="line">user = example</span><br><span class="line">key_file = ~/.ssh/id_rsa.pem</span><br><span class="line">md5sum_command = md5sum</span><br><span class="line">sha1sum_command = sha1sum</span><br></pre></td></tr></table></figure><p>这里的配置看起来比较简单，主要用意是使用keyfile+sftp登录服务器。最后，将服务器目录影射为虚拟磁盘。</p><h3 id="4-2-影射虚拟磁盘"><a href="#4-2-影射虚拟磁盘" class="headerlink" title="4.2 影射虚拟磁盘"></a>4.2 影射虚拟磁盘</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 将252服务器根目录影射到X盘，并启用缓存</span><br><span class="line">rclone mount 252:/ x: --cache-dir D:\cache\252 --vfs-cache-mode writes &amp;</span><br></pre></td></tr></table></figure><h2 id="5-将Android源码导入Android-Studio"><a href="#5-将Android源码导入Android-Studio" class="headerlink" title="5. 将Android源码导入Android Studio"></a>5. 将Android源码导入Android Studio</h2><h3 id="5-1-准备"><a href="#5-1-准备" class="headerlink" title="5.1 准备"></a>5.1 准备</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /Android/Source</span><br><span class="line">ls -l |grep ^d |grep -v frameworks |grep -v system |awk '&#123;print $9&#125;'</span><br></pre></td></tr></table></figure><p>这一步是将Android源码下的目录截取出来，以便后面排除不关心的目录，我这里仅保留了frameworks和system</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">art</span><br><span class="line">bionic</span><br><span class="line">bootable</span><br><span class="line">build</span><br><span class="line">compatibility</span><br><span class="line">cts</span><br><span class="line">dalvik</span><br><span class="line">developers</span><br><span class="line">development</span><br><span class="line">device</span><br><span class="line">EHomeApp</span><br><span class="line">EHomePreinstall</span><br><span class="line">external</span><br><span class="line">gen</span><br><span class="line">hardware</span><br><span class="line">kernel</span><br><span class="line">libcore</span><br><span class="line">libnativehelper</span><br><span class="line">mkcombinedroot</span><br><span class="line">out</span><br><span class="line">packages</span><br><span class="line">pdk</span><br><span class="line">platform_testing</span><br><span class="line">prebuilts</span><br><span class="line">rkbin</span><br><span class="line">RKDocs</span><br><span class="line">rkst</span><br><span class="line">RKTools</span><br><span class="line">rockdev</span><br><span class="line">sdk</span><br><span class="line">test</span><br><span class="line">toolchain</span><br><span class="line">tools</span><br><span class="line">u-boot</span><br><span class="line">vendor</span><br></pre></td></tr></table></figure><p>将上面的结果附加到development/tools/idegen/excluded-paths文件末尾</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l |grep ^d |grep -v frameworks |grep -v system |awk '&#123;print "^"$9&#125;' &gt;&gt; development/tools/idegen/excluded-paths</span><br></pre></td></tr></table></figure><h3 id="5-2-生成Android项目"><a href="#5-2-生成Android项目" class="headerlink" title="5.2 生成Android项目"></a>5.2 生成Android项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd Android/Source</span><br><span class="line">source build/envsetup.sh</span><br><span class="line">lunch xxxxx</span><br><span class="line">mmm development/tools/idegen</span><br><span class="line">development/tools/idegen/idegen.sh</span><br></pre></td></tr></table></figure><p>以上命令序列将在Android/Source目录下生成android.ipr和Android.iml，Android studio可直接打开android.ipr，先修改Android.iml文件，排除不关心的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l |grep ^d |grep -v frameworks |grep -v system |awk '&#123;print "&lt;excludeFolder url=\"file://$MODULE_DIR$/"$9"\" /&gt;"&#125;'</span><br></pre></td></tr></table></figure><p>得到如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/art" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/bionic" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/bootable" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/build" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/compatibility" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/cts" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/dalvik" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/developers" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/development" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/device" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/EHomeApp" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/EHomePreinstall" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/external" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/gen" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/hardware" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/kernel" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/libcore" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/libnativehelper" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/mkcombinedroot" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/out" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/packages" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/pdk" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/platform_testing" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/prebuilts" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/rkbin" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/RKDocs" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/rkst" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/RKTools" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/rockdev" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/sdk" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/test" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/toolchain" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/tools" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/u-boot" /&gt;</span><br><span class="line">&lt;excludeFolder url="file://$MODULE_DIR$/vendor" /&gt;</span><br></pre></td></tr></table></figure><p>将上面的内容放到android.iml文件的合适位置，并稍做修改，删除重复项即可</p><h3 id="5-3-导入Android工程"><a href="#5-3-导入Android工程" class="headerlink" title="5.3 导入Android工程"></a>5.3 导入Android工程</h3><p>现在将可以使用Windows上Android Studio打开虚拟磁盘上的Android.ipr文件，等待Android studio索引完成，大功告成。</p><h3 id="6-参考资料："><a href="#6-参考资料：" class="headerlink" title="6. 参考资料："></a>6. 参考资料：</h3><p><a href="https://elixir.bootlin.com/linux/latest/source" target="_blank" rel="noopener">kernel代码在线阅读</a></p><p><a href="https://sourcegraph.com/github.com/torvalds/linux" target="_blank" rel="noopener">使用github+sourcegraph在线阅读内核代码</a></p><p><a href="https://martins3.github.io/My-Linux-Config/docs/nvim.html" target="_blank" rel="noopener">2022 年 vim 的 C/C++ 配置</a></p><p><a href="https://zhuanlan.zhihu.com/p/139200172" target="_blank" rel="noopener">Windows平台下使用 Rclone 挂载 OneDrive 为本地硬盘</a></p><p><a href="https://blog.devwu.com/2019/06/23/how-to-reading-AOSP-with-Android-Studio/" target="_blank" rel="noopener">使用 Android Studio 阅读 AOSP 源码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1. 背景&quot;&gt;&lt;/a&gt;1. 背景&lt;/h2&gt;&lt;p&gt;之前一直都是看Kernel源码，网上有很多好用的工具，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://
      
    
    </summary>
    
    
      <category term="embedded" scheme="http://marryton007.github.io/categories/embedded/"/>
    
    
      <category term="Android" scheme="http://marryton007.github.io/tags/Android/"/>
    
      <category term="linux" scheme="http://marryton007.github.io/tags/linux/"/>
    
      <category term="Android studio" scheme="http://marryton007.github.io/tags/Android-studio/"/>
    
  </entry>
  
  <entry>
    <title>Android环境中bcc/bpftrace环境搭建</title>
    <link href="http://marryton007.github.io/2022/04/29/embedded/adeb/"/>
    <id>http://marryton007.github.io/2022/04/29/embedded/adeb/</id>
    <published>2022-04-29T03:54:00.000Z</published>
    <updated>2022-05-21T02:53:38.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>最近想研究一下Android中的性能分析，特别是关于使用<a href="https://github.com/iovisor/bpftrace" target="_blank" rel="noopener">bpftrace</a>,<a href="https://github.com/iovisor/bcc" target="_blank" rel="noopener">bcc</a>等工具对Linux内核进行动态跟踪的方法，因为Android本身工具并不丰富，网上大部分文章都是推荐使用<a href="https://github.com/marryton007/adeb.git" target="_blank" rel="noopener">adeb</a>这个工具，本篇文章就是关于如何搭建<a href="https://github.com/marryton007/adeb.git" target="_blank" rel="noopener">adeb</a>环境。</p><h2 id="2-环境"><a href="#2-环境" class="headerlink" title="2. 环境"></a>2. 环境</h2><p>Ubuntu18.04 + RK3568开发板 Android11</p><h2 id="3-原理"><a href="#3-原理" class="headerlink" title="3. 原理"></a>3. 原理</h2><p>简单来讲，adeb使用qemu-debootstrap工具生成了一个文件系统，并将这个文件系统通过adb push到Android开发板上，最后chroot到这个文件系统中运行shell。</p><h2 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h2><h3 id="4-1-快速使用"><a href="#4-1-快速使用" class="headerlink" title="4.1 快速使用"></a>4.1 快速使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 下载预先制作好的文件系统</span><br><span class="line">cd ~/download</span><br><span class="line">curl -O https://github.com/joelagnel/adeb/releases/download/v0.99h/androdeb-fs.tgz.zip</span><br><span class="line">unzip androdeb-fs.tgz.zip</span><br><span class="line"></span><br><span class="line">// 下载adeb</span><br><span class="line">cd ~/git</span><br><span class="line">git clone  https://github.com/marryton007/adeb.git</span><br><span class="line">cd adeb</span><br><span class="line">sudo ln -s $(pwd)/adeb /usr/bin/adeb</span><br><span class="line">// 准备adeb环境</span><br><span class="line">adeb prepare --archive ~/download/androdeb-fs.tgz</span><br><span class="line">// 登录进入开发板，这里需要adb能访问开发板</span><br><span class="line">adeb shell</span><br></pre></td></tr></table></figure><h3 id="4-2-自制文件系统"><a href="#4-2-自制文件系统" class="headerlink" title="4.2 自制文件系统"></a>4.2 自制文件系统</h3><p>也许前面的文件系统不能完全满足你的要求，你可以修改adeb源码，添加自己的软件包，并制作自己的文件系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 制作文件系统，并打包成androdeb-fs.tgz</span><br><span class="line">adeb prepare --full --buildtar</span><br><span class="line">cp androdeb-fs* ~/download</span><br></pre></td></tr></table></figure><h3 id="4-3-通过NFS加载"><a href="#4-3-通过NFS加载" class="headerlink" title="4.3 通过NFS加载"></a>4.3 通过NFS加载</h3><p>即便你生成了androdeb-fs.tgz,但每次执行下面的指令都要花费很长的时间，因为它会上传压缩文件，并解压，花费的时间与文件系统大小有关，另外，如果开发板存储空间不够的话，也会有问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adeb prepare --archive ~/download/androdeb-fs.tgz</span><br></pre></td></tr></table></figure><p>生命有限，不要将时间浪费在无谓的重复上，解决办法：使用NFS加载文件系统</p><h3 id="4-4-准备NFS服务器"><a href="#4-4-准备NFS服务器" class="headerlink" title="4.4 准备NFS服务器"></a>4.4 准备NFS服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nfs-kernel-server</span><br><span class="line">sudo mkdir /opt/androdeb</span><br><span class="line">echo "/opt/androdeb  *(rw,sync,no_subtree_check,no_root_squash,insecure)" |sudo tee /etc/exports</span><br><span class="line">sudo systemctl restart nfs-server</span><br><span class="line">sudo exportfs -rv</span><br></pre></td></tr></table></figure><h3 id="4-5-填充文件系统内容"><a href="#4-5-填充文件系统内容" class="headerlink" title="4.5 填充文件系统内容"></a>4.5 填充文件系统内容</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp ~/git/adeb/addons/* /opt/androdeb</span><br><span class="line">sudo tar xf ~/download/androdeb-fs.tgz -C /opt/androdeb</span><br></pre></td></tr></table></figure><h3 id="4-5-Android开发板准备"><a href="#4-5-Android开发板准备" class="headerlink" title="4.5 Android开发板准备"></a>4.5 Android开发板准备</h3><p>Android系统要加载NFS文件系统，首先要内核支持NFS，请确保以下Kernel选项是选中的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_NETWORK_FILESYSTEMS=y</span><br><span class="line">CONFIG_NFS_FS=y</span><br><span class="line">CONFIG_NFS_V2=y</span><br><span class="line">CONFIG_NFS_V3=y</span><br><span class="line">CONFIG_NFS_COMMON=y</span><br><span class="line">CONFIG_SUNRPC=y</span><br></pre></td></tr></table></figure><h3 id="4-6-加载NFS文件系统"><a href="#4-6-加载NFS文件系统" class="headerlink" title="4.6 加载NFS文件系统"></a>4.6 加载NFS文件系统</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adb root &amp;&amp; adb remount &amp;&amp; adb tcpip 5555</span><br><span class="line">adb shell</span><br><span class="line">// 如果不关闭 selinux，mount 时会报：failed: I/O error</span><br><span class="line">setenforce 0</span><br><span class="line">mkdir /data/androdeb</span><br><span class="line">// 请将nfsserver用真实IP地址替换</span><br><span class="line">busybox mount -t nfs -o nolock  nfsserver:/opt/androdeb  /data/androdeb</span><br></pre></td></tr></table></figure><h3 id="4-7-通过NFS文件系统运行bcc，bpftrace"><a href="#4-7-通过NFS文件系统运行bcc，bpftrace" class="headerlink" title="4.7 通过NFS文件系统运行bcc，bpftrace"></a>4.7 通过NFS文件系统运行bcc，bpftrace</h3><p>通过NFS加载文件系统后，即可以切换到NFS文件系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">cd /data/androdeb</span><br><span class="line">source run.common</span><br><span class="line">do_mounts</span><br><span class="line">// chroot到NFS文件系统</span><br><span class="line">./run</span><br><span class="line">opensnoop-bpfcc</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;built-in&gt;:1:10: fatal error: './include/linux/kconfig.h' file not found</span><br><span class="line"><span class="meta">#</span><span class="bash">include <span class="string">"./include/linux/kconfig.h"</span></span></span><br><span class="line">         ^~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">1 error generated.</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/usr/sbin/opensnoop-bpfcc", line 181, in &lt;module&gt;</span><br><span class="line">    b = BPF(text=bpf_text)</span><br><span class="line">  File "/usr/lib/python2.7/dist-packages/bcc/__init__.py", line 320, in __init__</span><br><span class="line">    raise Exception("Failed to compile BPF text")</span><br><span class="line">Exception: Failed to compile BPF text</span><br></pre></td></tr></table></figure><p>这里是由于缺少Kernel头文件，我直接通过sshfs(你可以尝试NFS)将kernel源码影射到/lib/modules/<code>uname -r</code>/build目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 以下命令是在NFS文件系统中执行</span><br><span class="line">mkdir -p /lib/modules/`uname -r`/build</span><br><span class="line">// 由于build服务器只能使用密钥登录，这里将私钥将传到Android开发板上</span><br><span class="line">chmod 600 /data/local/id_rsa</span><br><span class="line">sshfs xxx@build-server:/opt/sdk/rock/rk-android11/kernel /lib/modules/`uname -r`/build -o IdentityFile=/data/local/id_rsa</span><br></pre></td></tr></table></figure><p>如果上面的sshfs使用有问题，可以尝添加如下参数查看DEBUG信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sshfs xxx@build-server:/opt/sdk/rock/rk-android11/kernel /lib/modules/`uname -r`/build -o IdentityFile=/data/local/id_rsa -o debug -o sshfs_debug</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整个过程看起来还是比较复杂的，既要编译内核，又用到了2种网络文件系统(NFS，SSHFS)，这也与Android系统自身有关系，毕竟与通用的Linux还是有不少差别，这里也是做个记录，怕忘记了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/joelagnel/adeb" target="_blank" rel="noopener">原始的adeb仓库</a><br><a href="https://github.com/marryton007/adeb.git" target="_blank" rel="noopener">我的adeb仓库</a><br><a href="https://www.jianshu.com/p/b6f00754ead6" target="_blank" rel="noopener">nfs server 过防火墙</a><br><a href="https://blog.csdn.net/u010164190/article/details/100142755" target="_blank" rel="noopener">通过wifi使用nfs把ubuntu挂载到android</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1. 背景&quot;&gt;&lt;/a&gt;1. 背景&lt;/h2&gt;&lt;p&gt;最近想研究一下Android中的性能分析，特别是关于使用&lt;a href=&quot;https://github.com/iovi
      
    
    </summary>
    
    
      <category term="embedded" scheme="http://marryton007.github.io/categories/embedded/"/>
    
    
      <category term="Android" scheme="http://marryton007.github.io/tags/Android/"/>
    
      <category term="linux" scheme="http://marryton007.github.io/tags/linux/"/>
    
      <category term="adeb" scheme="http://marryton007.github.io/tags/adeb/"/>
    
  </entry>
  
  <entry>
    <title>RK3568使用KGDB调试内核</title>
    <link href="http://marryton007.github.io/2022/03/15/embedded/RK3568%E4%BD%BF%E7%94%A8KGDB%E8%B0%83%E8%AF%95%E5%86%85%E6%A0%B8/"/>
    <id>http://marryton007.github.io/2022/03/15/embedded/RK3568%E4%BD%BF%E7%94%A8KGDB%E8%B0%83%E8%AF%95%E5%86%85%E6%A0%B8/</id>
    <published>2022-03-15T08:24:00.000Z</published>
    <updated>2022-05-21T02:53:38.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1. 开发环境"></a>1. 开发环境</h2><p>开发板： RK3568 evb1<br>内核版本： 4.19.172<br>开发机： Windows 10 + VirtualBox VM ubuntu20.04<br>编译服务器： ubuntu18.04 </p><h2 id="2-背景"><a href="#2-背景" class="headerlink" title="2. 背景"></a>2. 背景</h2><p>在浏览内核代码、开发内核功能模块的过程，有时需要跟踪内核执行流程，常用的手段有：</p><ul><li>printk/pr_xxx  添加打印语句，需要重新编译模块</li><li>dynamic print， 动态调试，在运行时启用或停用模块的调试功能，无须重新编译模块</li><li>kgdb调试，可以对内核设置断点，或进行单步跟踪，使用方式比较友好</li></ul><p>本文主要介绍最后一种，kgdb 是Linux内核提供一个gdb server，远程gdb可以通过串口或网络来连接，大致过程如下：</p><ul><li>编译支持kgdb的内核，并烧录到开发板上</li><li>开发机通过串口连接到开发板</li><li>开发机上通过gdb连接到开发板上kgdb，开始调试</li></ul><h2 id="3-目的"><a href="#3-目的" class="headerlink" title="3. 目的"></a>3. 目的</h2><p>记录开发过程，为后续开发和使用提供资料，防止重复踩坑</p><h2 id="4-开发板配置"><a href="#4-开发板配置" class="headerlink" title="4. 开发板配置"></a>4. 开发板配置</h2><h3 id="4-1-配置内核支持kgdb"><a href="#4-1-配置内核支持kgdb" class="headerlink" title="4.1 配置内核支持kgdb"></a>4.1 配置内核支持kgdb</h3><p>在内核配置文件.config中， 需要确认如下选项：</p><table><thead><tr><th>CONFIG_KGDB</th><th>加入KGDB支持</th></tr></thead><tbody><tr><td>CONFIG_KGDB_SERIAL_CONSOLE</td><td>使KGDB通过串口与主机通信(打开这个选项，默认会打开CONFIG_CONSOLE_POLL和CONFIG_MAGIC_SYSRQ)</td></tr><tr><td>CONFIG_KGDB_KDB</td><td>加入KDB支持</td></tr><tr><td>CONFIG_DEBUG_KERNEL</td><td>包含驱动调试信息</td></tr><tr><td>CONFIG_DEBUG_INFO</td><td>使内核包含基本调试信息</td></tr><tr><td>CONFIG_STRICT_KERNEL_RWX=n</td><td>可选，关闭这个，能在只读区域设置断点</td></tr></tbody></table><p>可选选项：</p><table><thead><tr><th>CONFIG_FRAME_POINTER</th><th>使KDB能够打印更多的栈信息</th></tr></thead><tbody><tr><td>CONFIG_KALLSYMS</td><td>加入符号信息</td></tr><tr><td>CONFIG_KDB_KEYBOARD</td><td>如果是通过目标版的键盘与KDB通信，需要把这个打开，且键盘不能是USB接口</td></tr><tr><td>CONFIG_KGDB_TESTS</td><td></td></tr><tr><td>CONFIG_GDB_SCRIPTS=y</td><td>内核提供的GDB脚本</td></tr></tbody></table><h3 id="4-2-完善kgdb"><a href="#4-2-完善kgdb" class="headerlink" title="4.2 完善kgdb"></a>4.2 完善kgdb</h3><p>远端的 gdb 连上 linux 的 kgdb 之后，在断点处执行单步调式（step/next）的时候，调式器并不是执行断点处的语句，而是每次都陷入到下面的代码段：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arch/arm64/kernel/entry.S：<span class="number">356</span></span><br><span class="line">el1_irq:</span><br><span class="line">        kernel_entry <span class="number">1</span></span><br><span class="line">        enable_dbg</span><br></pre></td></tr></table></figure><p>社区也有人碰到这个问题，并提交了如下 patch 来修复这个问题。这个问题并不是在所有的 arm64 平台上都会碰到，patch 还在讨论并没有合进 upstream，Patch 如下:</p><blockquote><p><a href="https://patchwork.kernel.org/project/linux-arm-kernel/patch/20170523043058.5463-3-takahiro.akashi@linaro.org/" target="_blank" rel="noopener">https://patchwork.kernel.org/project/linux-arm-kernel/patch/20170523043058.5463-3-takahiro.akashi@linaro.org/</a></p></blockquote><p>上面的网页里可以下载补丁文件，不过需要稍做修改才能在Linux-4.19.172工作。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/kernel/arch/arm64/kernel/kgdb.c b/kernel/arch/arm64/kernel/kgdb.c</span><br><span class="line">index 8815b5457d..e3c11e3d0f 100644</span><br><span class="line"><span class="comment">--- a/kernel/arch/arm64/kernel/kgdb.c</span></span><br><span class="line"><span class="comment">+++ b/kernel/arch/arm64/kernel/kgdb.c</span></span><br><span class="line"><span class="meta">@@ -28,6 +28,7 @@</span></span><br><span class="line"> </span><br><span class="line"> #include &lt;asm/debug-monitors.h&gt;</span><br><span class="line"> #include &lt;asm/insn.h&gt;</span><br><span class="line"><span class="addition">+#include &lt;asm/ptrace.h&gt;</span></span><br><span class="line"> #include &lt;asm/traps.h&gt;</span><br><span class="line"> </span><br><span class="line"> struct dbg_reg_def_t dbg_reg_def[DBG_MAX_REG_NUM] = &#123;</span><br><span class="line">@@ -111,6 +112,8 @@ struct dbg_reg_def_t dbg_reg_def[DBG_MAX_REG_NUM] = &#123;</span><br><span class="line">        &#123; "fpcr", 4, -1 &#125;,</span><br><span class="line"> &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="addition">+static DEFINE_PER_CPU(unsigned int, kgdb_pstate);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"> char *dbg_get_reg(int regno, void *mem, struct pt_regs *regs)</span><br><span class="line"> &#123;</span><br><span class="line">        if (regno &gt;= DBG_MAX_REG_NUM || regno &lt; 0)</span><br><span class="line">@@ -217,6 +220,10 @@ int kgdb_arch_handle_exception(int exception_vector, int signo,</span><br><span class="line">                err = 0;</span><br><span class="line">                break;</span><br><span class="line">        case 's':</span><br><span class="line"><span class="addition">+               /* mask interrupts while single stepping */</span></span><br><span class="line"><span class="addition">+               __this_cpu_write(kgdb_pstate, linux_regs-&gt;pstate);</span></span><br><span class="line"><span class="addition">+               linux_regs-&gt;pstate |= PSR_I_BIT;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">                /*</span><br><span class="line">                 * Update step address value with address passed</span><br><span class="line">                 * with step packet.</span><br><span class="line">@@ -266,11 +273,22 @@ NOKPROBE_SYMBOL(kgdb_compiled_brk_fn);</span><br><span class="line"> </span><br><span class="line"> static int kgdb_step_brk_fn(struct pt_regs *regs, unsigned int esr)</span><br><span class="line"> &#123;</span><br><span class="line"><span class="deletion">-       if (user_mode(regs) || !kgdb_single_step)</span></span><br><span class="line"><span class="deletion">-               return DBG_HOOK_ERROR;</span></span><br><span class="line"><span class="addition">+  unsigned int pstate;</span></span><br><span class="line"> </span><br><span class="line"><span class="deletion">-       kgdb_handle_exception(0, SIGTRAP, 0, regs);</span></span><br><span class="line"><span class="deletion">-       return DBG_HOOK_HANDLED;</span></span><br><span class="line"><span class="addition">+  if (user_mode(regs) || !kgdb_single_step)</span></span><br><span class="line"><span class="addition">+    return DBG_HOOK_ERROR;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  kernel_disable_single_step();</span></span><br><span class="line"><span class="addition">+  /* restore interrupt mask status */</span></span><br><span class="line"><span class="addition">+  pstate = __this_cpu_read(kgdb_pstate);</span></span><br><span class="line"><span class="addition">+  if (pstate &amp; PSR_I_BIT)</span></span><br><span class="line"><span class="addition">+    regs-&gt;pstate |= PSR_I_BIT;</span></span><br><span class="line"><span class="addition">+  else</span></span><br><span class="line"><span class="addition">+    regs-&gt;pstate &amp;= ~PSR_I_BIT;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  kgdb_handle_exception(0, SIGTRAP, 0, regs);</span></span><br><span class="line"><span class="addition">+  return DBG_HOOK_HANDLED;</span></span><br><span class="line"> &#125;</span><br><span class="line"> NOKPROBE_SYMBOL(kgdb_step_brk_fn);</span><br></pre></td></tr></table></figure><h3 id="4-3-启动开发板"><a href="#4-3-启动开发板" class="headerlink" title="4.3 启动开发板"></a>4.3 启动开发板</h3><p>将编译好的内核烧录至开发板，通过ADB连接或控制台输入如下命令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo ttyFIQ0 &gt; /sys/<span class="keyword">module</span>/kgdboc/parameters/kgdboc</span><br><span class="line">echo g &gt; /proc/sysrq-trigger</span><br></pre></td></tr></table></figure><p>其中ttyFIQ0是开发机和开发板相连的串口。</p><p>sysrq-trigger是Linux魔术键，发送不同的键值可引发内核不同操作，g就是进行kgdb模式。执行完最后一句后，开发板进入kgdb模块，这里按任何键都没有反应，内核等待接收gdb调试请求。</p><h2 id="5-开发机配置"><a href="#5-开发机配置" class="headerlink" title="5. 开发机配置"></a>5. 开发机配置</h2><p>接下来的操作需要使用Linux环境，但由于平时使用window10工作，这里配置一台VirtualBox虚拟机，运行是Ubuntu20.04，后续工作都在虚拟机里进行。</p><h3 id="5-1-影射USB串口到虚拟机"><a href="#5-1-影射USB串口到虚拟机" class="headerlink" title="5.1 影射USB串口到虚拟机"></a>5.1 影射USB串口到虚拟机</h3><p><img src="_media/image-20211022152722533.png" alt="image-20211022152722533"></p><h3 id="5-2-安装工具"><a href="#5-2-安装工具" class="headerlink" title="5.2 安装工具"></a>5.2 安装工具</h3><p>在x86平台上调试arm64文件不能使用平时的gdb，要安装gdb-multiarch。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gdb-multiarch</span><br></pre></td></tr></table></figure><p>所有的内核源码，编译出来的内核镜像文件都在编译服务器上，要将服务器上的目录影射到虚拟机中来，可以使用NFS，这里选择使用sshfs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install sshfs</span><br><span class="line">mkdir /opt/sdk/rongping/android-20210804</span><br><span class="line"><span class="meta">#</span><span class="bash"> mount remote filesystem with sshfs</span></span><br><span class="line">sshfs xxx@192.168.60.252:/opt/sdk/rongping/android-20210804 /opt/sdk/rongping/android-20210804</span><br></pre></td></tr></table></figure><h3 id="5-3-开始调试"><a href="#5-3-开始调试" class="headerlink" title="5.3 开始调试"></a>5.3 开始调试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/sdk/rongping/android-20210804/kernel</span><br><span class="line"><span class="meta">#</span><span class="bash"> vmlinux是带调试信息的内核镜像</span></span><br><span class="line">gdb-multiarch ./vmlinux</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设备目标平台</span></span><br><span class="line">set architecture aarch64</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置串口波特率</span></span><br><span class="line">set serial baud 115200</span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过串口连接到开发上的kgdb</span></span><br><span class="line">target remote /dev/ttyUSB0</span><br></pre></td></tr></table></figure><p>一切正常的话，会有如下提示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">vagrant@vagrant:/opt/sdk/rongping/android-20210804/kernel$ gdb-multiarch ./vmlinux</span><br><span class="line">GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2</span><br><span class="line">Copyright (C) 2020 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type "show copying" and "show warranty" for details.</span><br><span class="line">This GDB was configured as "x86_64-linux-gnu".</span><br><span class="line">Type "show configuration" for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For help, type "help".</span><br><span class="line">Type "apropos word" to search for commands related to "word"...</span><br><span class="line">Reading symbols from ./vmlinux...</span><br><span class="line">warning: File "/opt/sdk/rongping/android-20210804/kernel/scripts/gdb/vmlinux-gdb.py" auto-loading has been declined by your `auto-load safe-path' set to "$debugdir:$datadir/auto-load".</span><br><span class="line">To enable execution of this file add</span><br><span class="line">        add-auto-load-safe-path /opt/sdk/rongping/android-20210804/kernel/scripts/gdb/vmlinux-gdb.py</span><br><span class="line">line to your configuration file "/home/vagrant/.gdbinit".</span><br><span class="line">To completely disable this security protection add</span><br><span class="line">        set auto-load safe-path /</span><br><span class="line">line to your configuration file "/home/vagrant/.gdbinit".</span><br><span class="line">For more information about this security protection see the</span><br><span class="line">"Auto-loading safe path" section in the GDB manual.  E.g., run from the shell:</span><br><span class="line">        info "(gdb)Auto-loading safe path"</span><br><span class="line">(gdb) set architecture aarch64</span><br><span class="line">The target architecture is assumed to be aarch64</span><br><span class="line">(gdb) set serial baud 115200</span><br><span class="line">(gdb) target remote /dev/ttyUSB0</span><br><span class="line">Remote debugging using /dev/ttyUSB0</span><br><span class="line">arch_kgdb_breakpoint () at ./arch/arm64/include/asm/kgdb.h:32</span><br><span class="line">32              asm ("brk %0" : : "I" (KGDB_COMPILED_DBG_BRK_IMM));</span><br></pre></td></tr></table></figure><p>设置断点，并继续运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b rockchip_drm_summary_show</span><br><span class="line">Breakpoint 1 at 0xffffff8008647ba0: file drivers&#x2F;gpu&#x2F;drm&#x2F;rockchip&#x2F;rockchip_drm_drv.c, line 1346.</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br></pre></td></tr></table></figure><p>回到开发板，这时发现又可以输入命令了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rk3568_r:/ # cat /d/dri/0/summary</span><br></pre></td></tr></table></figure><p>再次回到虚拟机，发现刚才设置的断点已经触发了，并可以使用<code>n,s,p,c</code>等命令进行调试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">[New Thread 1896]</span><br><span class="line">[New Thread 1897]</span><br><span class="line">[New Thread 1898]</span><br><span class="line">--Type &lt;RET&gt; for more, q to quit, c to continue without paging--</span><br><span class="line">[Switching to Thread 1919]</span><br><span class="line"></span><br><span class="line">Thread 1058 hit Breakpoint 1, rockchip_drm_summary_show (s=0xffffffc03a927000, data=0x1) at drivers/gpu/drm/rockchip/rockchip_drm_drv.c:1346</span><br><span class="line">1346    &#123;</span><br><span class="line">(gdb) n</span><br><span class="line">1348            struct drm_minor *minor = node-&gt;minor;</span><br><span class="line">(gdb) n</span><br><span class="line">1349            struct drm_device *drm_dev = minor-&gt;dev;</span><br><span class="line">(gdb) </span><br><span class="line">1353            drm_for_each_crtc(crtc, drm_dev) &#123;</span><br><span class="line">(gdb) s</span><br><span class="line">1350            struct rockchip_drm_private *priv = drm_dev-&gt;dev_private;</span><br><span class="line">(gdb) n</span><br><span class="line">1353            drm_for_each_crtc(crtc, drm_dev) &#123;</span><br><span class="line">(gdb) l</span><br><span class="line">1348            struct drm_minor *minor = node-&gt;minor;</span><br><span class="line">1349            struct drm_device *drm_dev = minor-&gt;dev;</span><br><span class="line">1350            struct rockchip_drm_private *priv = drm_dev-&gt;dev_private;</span><br><span class="line">1351            struct drm_crtc *crtc;</span><br><span class="line">1352</span><br><span class="line">1353            drm_for_each_crtc(crtc, drm_dev) &#123;</span><br><span class="line">1354                    int pipe = drm_crtc_index(crtc);</span><br><span class="line">1355</span><br><span class="line">1356                    if (priv-&gt;crtc_funcs[pipe] &amp;&amp;</span><br><span class="line">1357                        priv-&gt;crtc_funcs[pipe]-&gt;debugfs_dump)</span><br><span class="line">(gdb) n</span><br><span class="line">1356                    if (priv-&gt;crtc_funcs[pipe] &amp;&amp;</span><br><span class="line">(gdb) </span><br><span class="line">1358                            priv-&gt;crtc_funcs[pipe]-&gt;debugfs_dump(crtc, s);</span><br><span class="line">(gdb) </span><br><span class="line">1356                    if (priv-&gt;crtc_funcs[pipe] &amp;&amp;</span><br><span class="line">(gdb) </span><br><span class="line">1357                        priv-&gt;crtc_funcs[pipe]-&gt;debugfs_dump)</span><br><span class="line">(gdb) </span><br><span class="line">1356                    if (priv-&gt;crtc_funcs[pipe] &amp;&amp;</span><br><span class="line">(gdb) </span><br><span class="line">1358                            priv-&gt;crtc_funcs[pipe]-&gt;debugfs_dump(crtc, s);</span><br><span class="line">(gdb) </span><br><span class="line">1353            drm_for_each_crtc(crtc, drm_dev) &#123;</span><br><span class="line">(gdb) </span><br><span class="line">1356                    if (priv-&gt;crtc_funcs[pipe] &amp;&amp;</span><br><span class="line">(gdb) p crtc</span><br><span class="line"><span class="meta">$</span><span class="bash">1 = (struct drm_crtc *) 0xffffffc07a650948</span></span><br><span class="line">(gdb) p *crtc</span><br><span class="line"><span class="meta">$</span><span class="bash">2 = &#123;dev = 0xffffffc07a532000, port = 0xffffffc07ff96618, head = &#123;next = 0xffffffc07a651208, prev = 0xffffffc07a6500a8&#125;, name = 0xffffffc07a63e180 <span class="string">"video_port1"</span>, mutex = &#123;mutex = &#123;base = &#123;owner = &#123;counter = 0&#125;, wait_lock = &#123;&#123;</span></span><br><span class="line">            rlock = &#123;raw_lock = &#123;&#123;val = &#123;counter = 0&#125;, &#123;locked = 0 '\000', pending = 0 '\000'&#125;, &#123;locked_pending = 0, tail = 0&#125;&#125;&#125;&#125;&#125;&#125;, osq = &#123;tail = &#123;counter = 0&#125;&#125;, wait_list = &#123;next = 0xffffffc07a650980, prev = 0xffffffc07a650980&#125;&#125;, </span><br><span class="line">      ctx = 0x0&#125;, head = &#123;next = 0xffffffc07a650998, prev = 0xffffffc07a650998&#125;&#125;, base = &#123;id = 85, type = 3435973836, properties = 0xffffffc07a650bf0, refcount = &#123;refcount = &#123;refs = &#123;counter = 0&#125;&#125;&#125;, free_cb = 0x0&#125;, </span><br><span class="line">  primary = 0xffffffc07a657278, cursor = 0x0, index = 1, cursor_x = 0, cursor_y = 0, enabled = true, mode = &#123;head = &#123;next = 0x0, prev = 0x0&#125;, base = &#123;id = 0, type = 0, properties = 0x0, refcount = &#123;refcount = &#123;refs = &#123;counter = 0&#125;&#125;&#125;, </span><br><span class="line">      free_cb = 0x0&#125;, name = "800x1280", '\000' &lt;repeats 23 times&gt;, status = MODE_OK, type = 72, clock = 67730, hdisplay = 800, hsync_start = 818, hsync_end = 836, htotal = 854, hskew = 0, vdisplay = 1280, vsync_start = 1300, </span><br><span class="line">    vsync_end = 1304, vtotal = 1314, vscan = 0, flags = 10, width_mm = 0, height_mm = 0, crtc_clock = 67730, crtc_hdisplay = 800, crtc_hblank_start = 800, crtc_hblank_end = 854, crtc_hsync_start = 818, crtc_hsync_end = 836, </span><br><span class="line">    crtc_htotal = 854, crtc_hskew = 0, crtc_vdisplay = 1280, crtc_vblank_start = 1280, crtc_vblank_end = 1314, crtc_vsync_start = 1300, crtc_vsync_end = 1304, crtc_vtotal = 1314, private = 0x0, private_flags = 0, vrefresh = 60, </span><br><span class="line">    hsync = 0, picture_aspect_ratio = HDMI_PICTURE_ASPECT_NONE, export_head = &#123;next = 0x0, prev = 0x0&#125;&#125;, hwmode = &#123;head = &#123;next = 0x0, prev = 0x0&#125;, base = &#123;id = 0, type = 0, properties = 0x0, refcount = &#123;refcount = &#123;refs = &#123;</span><br><span class="line">            counter = 0&#125;&#125;&#125;, free_cb = 0x0&#125;, name = '\000' &lt;repeats 31 times&gt;, status = MODE_OK, type = 0, clock = 0, hdisplay = 0, hsync_start = 0, hsync_end = 0, htotal = 0, hskew = 0, vdisplay = 0, vsync_start = 0, vsync_end = 0, </span><br><span class="line">    vtotal = 0, vscan = 0, flags = 0, width_mm = 0, height_mm = 0, crtc_clock = 0, crtc_hdisplay = 0, crtc_hblank_start = 0, crtc_hblank_end = 0, crtc_hsync_start = 0, crtc_hsync_end = 0, crtc_htotal = 0, crtc_hskew = 0, </span><br><span class="line">    crtc_vdisplay = 0, crtc_vblank_start = 0, crtc_vblank_end = 0, crtc_vsync_start = 0, crtc_vsync_end = 0, crtc_vtotal = 0, private = 0x0, private_flags = 0, vrefresh = 0, hsync = 0, picture_aspect_ratio = HDMI_PICTURE_ASPECT_NONE, </span><br><span class="line">    export_head = &#123;next = 0x0, prev = 0x0&#125;&#125;, x = 0, y = 0, funcs = 0xffffff8009371420 &lt;vop2_crtc_funcs&gt;, gamma_size = 1024, gamma_store = 0xffffffc07a6a4000, helper_private = 0xffffff80093714d8 &lt;vop2_crtc_helper_funcs&gt;, properties = &#123;</span><br><span class="line">    count = 13, properties = &#123;0xffffffc07a636e00, 0xffffffc07a636f00, 0xffffffc07a636c00, 0xffffffc07a638f80, 0xffffffc07a63a080, 0xffffffc07a63a180, 0xffffffc07a638400, 0xffffffc07a638500, 0xffffffc07a638600, 0xffffffc07a638700, </span><br><span class="line">      0xffffffc07a63e280, 0xffffffc07a637180, 0xffffffc07a637200, 0x0 &lt;repeats 51 times&gt;&#125;, values = &#123;0, 0, 0, 218762, 1, 0, 100, 100, 100, 100, 63, 0, 1024, 0 &lt;repeats 51 times&gt;&#125;&#125;, state = 0xffffffc036a34000, commit_list = &#123;</span><br><span class="line">    next = 0xffffffc07a651000, prev = 0xffffffc07a651000&#125;, commit_lock = &#123;&#123;rlock = &#123;raw_lock = &#123;&#123;val = &#123;counter = 0&#125;, &#123;locked = 0 '\000', pending = 0 '\000'&#125;, &#123;locked_pending = 0, tail = 0&#125;&#125;&#125;&#125;&#125;&#125;, debugfs_entry = 0xffffffc079ac25b0, </span><br><span class="line">  crc = &#123;lock = &#123;&#123;rlock = &#123;raw_lock = &#123;&#123;val = &#123;counter = 0&#125;, &#123;locked = 0 '\000', pending = 0 '\000'&#125;, &#123;locked_pending = 0, tail = 0&#125;&#125;&#125;&#125;&#125;&#125;, source = 0xffffffc07a63e200 "auto", opened = false, overflow = false, entries = 0x0, head = 0, </span><br><span class="line">    tail = 0, values_cnt = 0, wq = &#123;lock = &#123;&#123;rlock = &#123;raw_lock = &#123;&#123;val = &#123;counter = 0&#125;, &#123;locked = 0 '\000', pending = 0 '\000'&#125;, &#123;locked_pending = 0, tail = 0&#125;&#125;&#125;&#125;&#125;&#125;, head = &#123;next = 0xffffffc07a651058, prev = 0xffffffc07a651058&#125;&#125;&#125;, </span><br><span class="line">  fence_context = 5, fence_lock = &#123;&#123;rlock = &#123;raw_lock = &#123;&#123;val = &#123;counter = 0&#125;, &#123;locked = 0 '\000', pending = 0 '\000'&#125;, &#123;locked_pending = 0, tail = 0&#125;&#125;&#125;&#125;&#125;&#125;, fence_seqno = 0, </span><br><span class="line">  timeline_name = "CRTC:85-video_port1", '\000' &lt;repeats 12 times&gt;&#125;</span><br><span class="line">(gdb) finish</span><br><span class="line">Run till exit from #0  rockchip_drm_summary_show (s=0xffffffc03a927000, data=&lt;optimized out&gt;) at drivers/gpu/drm/rockchip/rockchip_drm_drv.c:1356</span><br><span class="line">[New Thread 1920]</span><br><span class="line">0xffffff8008292718 in seq_read (file=0xffffffc034f81100, buf=0x5eca018818 &lt;error: Cannot access memory at address 0x5eca018818&gt;, size=4096, ppos=0xffffff801094be60) at fs/seq_file.c:229</span><br><span class="line">229                     err = m-&gt;op-&gt;show(m, p);</span><br><span class="line">Value returned is $3 = 0</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br></pre></td></tr></table></figure><h2 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h2><p><a href="http://tinylab.org/kgdb-debugging-kernel/" target="_blank" rel="noopener">用 kGDB 调试 Linux 内核</a></p><p><a href="https://www.ivdone.top/article/872.html#1-2" target="_blank" rel="noopener">如何使用Kgdb调试内核源码？</a></p><p><a href="https://zhuanlan.zhihu.com/p/47783910" target="_blank" rel="noopener">如何在x86架构Linux上使用qemu+gdb调试aarch64的内核</a></p><p><a href="https://zhuanlan.zhihu.com/p/197545583" target="_blank" rel="noopener">kgdb调试aarch64内核模块</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-开发环境&quot;&gt;&lt;a href=&quot;#1-开发环境&quot; class=&quot;headerlink&quot; title=&quot;1. 开发环境&quot;&gt;&lt;/a&gt;1. 开发环境&lt;/h2&gt;&lt;p&gt;开发板： RK3568 evb1&lt;br&gt;内核版本： 4.19.172&lt;br&gt;开发机： Windows 1
      
    
    </summary>
    
    
      <category term="embedded" scheme="http://marryton007.github.io/categories/embedded/"/>
    
    
      <category term="Android" scheme="http://marryton007.github.io/tags/Android/"/>
    
      <category term="linux" scheme="http://marryton007.github.io/tags/linux/"/>
    
      <category term="kgdb" scheme="http://marryton007.github.io/tags/kgdb/"/>
    
  </entry>
  
  <entry>
    <title>Android Native内存泄漏检测</title>
    <link href="http://marryton007.github.io/2022/02/22/embedded/Android%20Native%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%A3%80%E6%B5%8B/"/>
    <id>http://marryton007.github.io/2022/02/22/embedded/Android%20Native%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%A3%80%E6%B5%8B/</id>
    <published>2022-02-22T07:34:00.000Z</published>
    <updated>2022-05-21T02:53:38.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-硬件平台"><a href="#1-硬件平台" class="headerlink" title="1. 硬件平台"></a>1. 硬件平台</h2><p>RK3568开发板， Android11</p><p>Android Studio 2020.3.1 patch 3 </p><h2 id="2-背景"><a href="#2-背景" class="headerlink" title="2. 背景"></a>2. 背景</h2><p>一次例行检查中发现公司产品Bugly平台上报了一个java频繁调用JNI，最终出现OOM，导致系统崩溃重启的问题，为了将此类问题扼杀在开发阶段，特记录本次测试过程，防止后续重复踩坑。在调查过程中发现，Android针对JAVA层的内存泄漏检查相对比较成熟，但对于native层的泄漏问题支持得不是很好。</p><h2 id="3-技术方案选择"><a href="#3-技术方案选择" class="headerlink" title="3. 技术方案选择"></a>3. 技术方案选择</h2><ul><li><a href="https://source.android.google.cn/devices/tech/debug/valgrind?hl=zh-cn" target="_blank" rel="noopener">Android 使用 valgrind</a></li><li><a href="https://developer.android.com/ndk/guides/asan" target="_blank" rel="noopener">Address Sanitizer (aka ASan)</a></li><li><a href="https://android.googlesource.com/platform/bionic/+/master/libc/malloc_debug/README.md" target="_blank" rel="noopener">Malloc Debug</a></li><li><a href="https://github.com/bytedance/memory-leak-detector" target="_blank" rel="noopener">字节跳动raphael</a></li></ul><h2 id="4-结论"><a href="#4-结论" class="headerlink" title="4. 结论"></a>4. 结论</h2><p>经过几天尝试，最终选用<a href="https://github.com/bytedance/memory-leak-detector" target="_blank" rel="noopener">字节跳动raphael</a>方案，这也是现在唯一能找到比较好的开源方案。其工作原理请参阅参考资料，使用说明请见Github网站。</p><h2 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h2><p><a href="https://mp.weixin.qq.com/s/RF3m9_v5bYTYbwY-d1RloQ" target="_blank" rel="noopener">西瓜视频稳定性治理体系建设二：Raphael 原理及实践</a></p><p><a href="https://zhuanlan.zhihu.com/p/371527210" target="_blank" rel="noopener">全民K歌Android端Native内存分析与监控方案实践总结</a></p><p><a href="https://github.com/iqiyi/xHook" target="_blank" rel="noopener">爱奇艺xHook</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-硬件平台&quot;&gt;&lt;a href=&quot;#1-硬件平台&quot; class=&quot;headerlink&quot; title=&quot;1. 硬件平台&quot;&gt;&lt;/a&gt;1. 硬件平台&lt;/h2&gt;&lt;p&gt;RK3568开发板， Android11&lt;/p&gt;
&lt;p&gt;Android Studio 2020.3.1 
      
    
    </summary>
    
    
      <category term="embedded" scheme="http://marryton007.github.io/categories/embedded/"/>
    
    
      <category term="Android" scheme="http://marryton007.github.io/tags/Android/"/>
    
      <category term="linux" scheme="http://marryton007.github.io/tags/linux/"/>
    
      <category term="memory leak" scheme="http://marryton007.github.io/tags/memory-leak/"/>
    
      <category term="hook" scheme="http://marryton007.github.io/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>自制Android启动动画</title>
    <link href="http://marryton007.github.io/2021/12/22/embedded/%E8%87%AA%E5%88%B6Android%E5%90%AF%E5%8A%A8%E5%8A%A8%E7%94%BB/"/>
    <id>http://marryton007.github.io/2021/12/22/embedded/%E8%87%AA%E5%88%B6Android%E5%90%AF%E5%8A%A8%E5%8A%A8%E7%94%BB/</id>
    <published>2021-12-22T02:28:00.000Z</published>
    <updated>2022-05-21T02:53:38.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>RK3568开发板，  Android 11</p><h2 id="2-目的"><a href="#2-目的" class="headerlink" title="2. 目的"></a>2. 目的</h2><p>记录开发过程中遇到的问题，防止重复踩坑</p><h2 id="3-素材准备"><a href="#3-素材准备" class="headerlink" title="3. 素材准备"></a>3. 素材准备</h2><ul><li><p>新建工作目录，目录下建立如下内容</p></li><li><p>多个子目录<br>  用于存放图片，如part01，part02等<br>  part01，一般放开机动画的第一张图片，目录只放一张图片<br>  part02， 放循环的图片，多张图片形成视频的效果</p></li><li><p>desc.txt，是动画的规则</p></li><li><p>desc.txt文件格式说明</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1280 800 25</span><br><span class="line">P   1  0 part01</span><br><span class="line">P   0  0 part02</span><br></pre></td></tr></table></figure><p>第一行，1280   800  是分辨率，25是帧数<br>第二行，1 是循环一次，0是间隔时间，part01是对应目录<br>第二行，0 是无限循环，0是间隔时间，part02是对应目录</p><h2 id="3-打包"><a href="#3-打包" class="headerlink" title="3. 打包"></a>3. 打包</h2><p>选择工作目录中的所有内容，使用压缩工具打包</p><p><img src="_media/image-20211013104739133.png" alt="image-20211013104739133"></p><p>注意打包时的选项</p><p><img src="_media/image-20211013105005744.png" alt="image-20211013105005744"></p><p>这里<strong>压缩文件的名称必须为<code>bootanimation.zip</code>，压缩等级必须选<code>存储</code>，</strong>不然开机动画无法正常工作。</p><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h2><p>在开发板上执行如下命令进行测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//进入ADB，建立/odm/media目录，且保证/odm可写入；如果已做过这一步，可跳过</span><br><span class="line">adb shell</span><br><span class="line">mount -o remount,rw /odm</span><br><span class="line">mkdir -p /odm/media</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">//上传制作好的压缩包到/odm/media目录</span><br><span class="line">adb push bootanimation.zip /odm/media</span><br><span class="line"></span><br><span class="line">//快速测试，查看开机动画</span><br><span class="line">adb shell setprop service.bootanim.exit 0</span><br><span class="line">adb shell setprop ctl.start bootanim</span><br><span class="line"></span><br><span class="line">//停止动画</span><br><span class="line">adb shell setprop service.bootanim.exit 1</span><br></pre></td></tr></table></figure><h2 id="6-提交"><a href="#6-提交" class="headerlink" title="6. 提交"></a>6. 提交</h2><p>测试通过后，替换RK3568 Android SDK中的同名文件，文件位于：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">device/rockchip/common/bootanimation.zip</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1. 背景&quot;&gt;&lt;/a&gt;1. 背景&lt;/h2&gt;&lt;p&gt;RK3568开发板，  Android 11&lt;/p&gt;
&lt;h2 id=&quot;2-目的&quot;&gt;&lt;a href=&quot;#2-目的&quot; cla
      
    
    </summary>
    
    
      <category term="embedded" scheme="http://marryton007.github.io/categories/embedded/"/>
    
    
      <category term="Android" scheme="http://marryton007.github.io/tags/Android/"/>
    
      <category term="linux" scheme="http://marryton007.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>交叉编译trace-cmd</title>
    <link href="http://marryton007.github.io/2021/11/29/embedded/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91trace-cmd/"/>
    <id>http://marryton007.github.io/2021/11/29/embedded/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91trace-cmd/</id>
    <published>2021-11-29T01:32:00.000Z</published>
    <updated>2022-05-21T02:53:38.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>在查看瑞芯微《Thermal开发指南》时，看到了可以使用trace-cmd来进行调试，出于对于类似调试工具的好奇，尝试在本地机器上交叉编译trace-cmd并上传到Android设备上使用，中间过程比较折腾，最终出了本文。同时，本文也可以作为类似工作的一个参考。</p><h2 id="2-编译过程"><a href="#2-编译过程" class="headerlink" title="2. 编译过程"></a>2. 编译过程</h2><h3 id="2-1-依赖"><a href="#2-1-依赖" class="headerlink" title="2.1 依赖"></a>2.1 依赖</h3><p>根据官方文档，trace-cmd用到了2个库，它们需要被先编译</p><ul><li>libtracceevent</li><li>libtracefs</li></ul><h3 id="2-2-下载源码并编译"><a href="#2-2-下载源码并编译" class="headerlink" title="2.2 下载源码并编译"></a>2.2 下载源码并编译</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建工作目录</span></span><br><span class="line">mkdir ~/git/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载libtraceevent并交叉编译libtraceevent</span></span><br><span class="line">git <span class="built_in">clone</span> https://git.kernel.org/pub/scm/libs/libtrace/libtraceevent.git/</span><br><span class="line"><span class="built_in">cd</span> libtraceevent</span><br><span class="line">CC=aarch64-linux-gnu-gcc CROSS_COMPILE=aarch64-linux-gnu- make DESTDIR=../build install</span><br><span class="line"><span class="comment"># 重要，替换libtraceevent.pc中的prefix</span></span><br><span class="line">sed -i -e <span class="string">'s@prefix=/usr/local@prefix=/home/jiaxi/git/build/usr/local@g'</span> ../build/usr/<span class="built_in">local</span>/lib/x86_64-linux-gnu/pkgconfig/libtraceevent.pc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载libtracefs并交叉编译libtracefs</span></span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line">git <span class="built_in">clone</span> https://git.kernel.org/pub/scm/libs/libtrace/libtracefs.git/</span><br><span class="line"><span class="built_in">cd</span> libtracefs</span><br><span class="line">PKG_CONFIG_PATH=../build/usr/<span class="built_in">local</span>/lib/x86_64-linux-gnu/pkgconfig CC=aarch64-linux-gnu-gcc CROSS_COMPILE=aarch64-linux-gnu- make DESTDIR=../build install</span><br><span class="line"><span class="comment"># 重要，替换libtracefs.pc中的prefix</span></span><br><span class="line">sed -i -e <span class="string">'s@prefix=/usr/local@prefix=/home/jiaxi/git/build/usr/local@g'</span> ../build/usr/<span class="built_in">local</span>/lib/x86_64-linux-gnu/pkgconfig/libtracefs.pc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载trace-cmd并交叉编译</span></span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line">git <span class="built_in">clone</span> git://git.kernel.org/pub/scm/utils/trace-cmd/trace-cmd.git</span><br><span class="line"><span class="built_in">cd</span> trace-cmd</span><br><span class="line">PKG_CONFIG_PATH=../build/usr/<span class="built_in">local</span>/lib/x86_64-linux-gnu/pkgconfig CC=aarch64-linux-gnu-gcc CROSS_COMPILE=aarch64-linux-gnu-  LDFLAGS=-static make DESTDIR=../build install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传到Android设备</span></span><br><span class="line"><span class="built_in">cd</span> ../build/usr/<span class="built_in">local</span>/bin</span><br><span class="line">adb push trace-cmd /system/bin</span><br></pre></td></tr></table></figure><p>关键注意点：</p><ul><li><strong>替换.pc文件中的prefix</strong>，不然pkg-config无法找到依赖库正确的路径</li><li>最终编译trace-cmd时，要加上<strong>LDFLAGS=-static</strong>，使用静态链接生成trace-cmd，这样，只需要上传trace-cmd这一个文件就可以了，不然在执行时会报”No such file or directory”</li></ul><h3 id="2-3-关键编译参数"><a href="#2-3-关键编译参数" class="headerlink" title="2.3 关键编译参数"></a>2.3 关键编译参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定交叉编译时使用的gcc</span></span><br><span class="line">CC=aarch64-linux-gnu-gcc</span><br><span class="line"><span class="comment"># 指定交叉编译工具链前缀，与上面CC是一对固定搭配</span></span><br><span class="line">CROSS_COMPILE=aarch64-linux-gnu-</span><br><span class="line"><span class="comment"># 指定安装位置，一般本地编译时默认安装位置是/usr/local，这里的意思是安装位置将会变成../build/usr/local；主要作用有3点，一是防止弄乱本地环境； 二是后面作用pkg-config的搜索路径，三是拷贝的时候方便，直接打包../build目录即可</span></span><br><span class="line">DESTDIR=../build</span><br><span class="line"><span class="comment"># pkg-config工具用于管理依赖关系，PKG_CONIFG_PATH用于指定pkg-config搜索的路径。</span></span><br><span class="line">PKG_CONFIG_PATH=../build/usr/<span class="built_in">local</span>/lib/x86_64-linux-gnu/pkgconfig</span><br><span class="line"><span class="comment"># 使用静态链接方式编译trace-cmd</span></span><br><span class="line">LDFLAGS=-static</span><br></pre></td></tr></table></figure><p>tips: 使用pkg-config 获取libtraceevent的头文件和库文件位置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~ PKG_CONFIG_PATH=../build/usr/<span class="built_in">local</span>/lib/x86_64-linux-gnu/pkgconfig pkg-config --cflags libtraceevent </span><br><span class="line">-I/home/jiaxi/git/build/usr/<span class="built_in">local</span>/include/traceevent</span><br><span class="line">~ PKG_CONFIG_PATH=../build/usr/<span class="built_in">local</span>/lib/x86_64-linux-gnu/pkgconfig pkg-config --libs libtraceevent </span><br><span class="line">-L/home/jiaxi/git/build/usr/<span class="built_in">local</span>/lib64 -ltraceevent</span><br></pre></td></tr></table></figure><h2 id="3-运行效果"><a href="#3-运行效果" class="headerlink" title="3. 运行效果"></a>3. 运行效果</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这一步在Android设备上运行, 会在当前目录生trace.dat文件</span></span><br><span class="line">rk3568_r:/data/<span class="built_in">local</span> <span class="comment"># trace-cmd record -e thermal -e thermal_power_allocator -b 102400</span></span><br><span class="line">Hit Ctrl^C to stop recording</span><br><span class="line">^C</span><br><span class="line">CPU0 data recorded at offset=0x507000</span><br><span class="line">    0 bytes <span class="keyword">in</span> size</span><br><span class="line">CPU1 data recorded at offset=0x507000</span><br><span class="line">    0 bytes <span class="keyword">in</span> size</span><br><span class="line">CPU2 data recorded at offset=0x507000</span><br><span class="line">    4096 bytes <span class="keyword">in</span> size</span><br><span class="line">CPU3 data recorded at offset=0x508000</span><br><span class="line">    0 bytes <span class="keyword">in</span> size</span><br><span class="line">rk3568_r:/data/<span class="built_in">local</span> <span class="comment"># ls</span></span><br><span class="line">trace.dat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面的步骤在PC上进行</span></span><br><span class="line"><span class="comment"># 下载trace.dat文件</span></span><br><span class="line">adb pull /data/<span class="built_in">local</span>/trace.dat  /tmp</span><br><span class="line"><span class="comment"># 转换成txt文件，即可进行分析了</span></span><br><span class="line">trace-cmd report /tmp/trace.dat &gt; /tmp/trace.txt</span><br></pre></td></tr></table></figure><h2 id="4-扩展资料"><a href="#4-扩展资料" class="headerlink" title="4. 扩展资料"></a>4. 扩展资料</h2><p>trace-cmd 作为ftrace的前端，是一个易于使用，且特性众多、可用来追踪内核函数的命令。</p><p><a href="https://linux.cn/article-13852-1.html" target="_blank" rel="noopener">使用 trace-cmd 追踪内核</a></p><p><a href="https://linux.cn/article-13752-1.html" target="_blank" rel="noopener">通过 ftrace 来分析 Linux 内核</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1. 背景&quot;&gt;&lt;/a&gt;1. 背景&lt;/h2&gt;&lt;p&gt;在查看瑞芯微《Thermal开发指南》时，看到了可以使用trace-cmd来进行调试，出于对于类似调试工具的好奇，尝试在
      
    
    </summary>
    
    
      <category term="embedded" scheme="http://marryton007.github.io/categories/embedded/"/>
    
    
      <category term="Android" scheme="http://marryton007.github.io/tags/Android/"/>
    
      <category term="linux" scheme="http://marryton007.github.io/tags/linux/"/>
    
      <category term="ftrace" scheme="http://marryton007.github.io/tags/ftrace/"/>
    
  </entry>
  
  <entry>
    <title>Hyperledge fabric peer 流程分析</title>
    <link href="http://marryton007.github.io/2018/12/08/fabric/peer-process/"/>
    <id>http://marryton007.github.io/2018/12/08/fabric/peer-process/</id>
    <published>2018-12-08T06:17:39.000Z</published>
    <updated>2022-05-21T02:53:38.016Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近花了大概 2 个星期左右阅读了 fabric-1.2.1 中与 peer 相关的源码，着重阅读了与 Chaincode(链码)交互相关的逻辑，因为之前并没有找到一些特别好的参考资料，在这里还是耽误了些时间，不过还好，虽是走了些弯路，但还算是走出来了。</p></li><li><h2 id="关键库"><a href="#关键库" class="headerlink" title="关键库"></a>关键库</h2><p>在<a href="https://read.douban.com/ebook/57504608/" target="_blank" rel="noopener">Hyperledger Fabric 源代码分析与深入解读</a>这本书中，第 3 章介绍了相关的库，如日志、配置文件、<a href="https://grpc.io/" target="_blank" rel="noopener">grpc</a>，Error，不过这本书是针对的 fabric1.0 版的代码，我看的源代码是 1.2.1 版，所以有些地方对不上，只能作为一个参考；下面列出的库还是很重要的：</p><ul><li>Logging，日志库，可以按级别打印消息，可用来调试</li><li><a href="https://github.com/spf13/viper" target="_blank" rel="noopener">viper</a>，配置文件读取，源码里相当多的地方要读取配置文件中的内容，所以你要知道<a href="https://github.com/spf13/viper" target="_blank" rel="noopener">viper</a>的工作原理，如去哪里找配置文件，及如何查找相关的配置项</li><li><a href="https://grpc.io/" target="_blank" rel="noopener">grpc</a>，fabric 是个分布式系统，各个组件可能并没有在一台主机上，那各组件之间如何通信，这里就用到<a href="https://grpc.io/" target="_blank" rel="noopener">grpc</a>框架了，强烈建议你先去看<a href="https://grpc.io/" target="_blank" rel="noopener">grpc</a>的官方文档，学习写个 Demo，再回头来看代码。</li><li><a href="https://github.com/spf13/cobra" target="_blank" rel="noopener">cobra</a>, 用 go 实现的命令行开发库，支持多级子命令，如 peer node start，cobra 的用法也比较好理解，看一下官方文档就好了。</li></ul></li><li><h2 id="相关工具、方法"><a href="#相关工具、方法" class="headerlink" title="相关工具、方法"></a>相关工具、方法</h2><p>工欲善其事，必先利其器，一个好的工具可以让你少走很多弯路，</p><ul><li>源码阅读工具<br>推荐使用 JetBrains Goland，它是专来 golang 环境设置的，操作起来比较简单，直观</li><li>调试环境<br>推荐使用 docker+remote debug 方式，在 docker 容器中安装 dlv 远程调试工具，这种方式并比较简单，只需要对原来的容器稍做定制，就可以通过命令行或 IDE 方式连接到 docker, 这种方式支持大多数的 IDE 环境，如 Visual code 和 goland,请参考这篇文章<a href="https://blog.jetbrains.com/go/2018/04/30/debugging-containerized-go-applications/" target="_blank" rel="noopener">Debugging containerized Go applications</a></li></ul></li><li><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li><p>总流程<br>peer/main.go –&gt; node/start.go 对应 peer node start 命令， peer 模块从 start.go 中的 serv 函数开始<br><img src="/img/fabric/peer-start.png" alt="peer_start"></p><p>可以看出 peer node start 就是启动一系列的 grpc 服务，供其他模块调用，下面具体看一下 Chaincode support 服务</p></li><li><p>Chaincode-support<br>该服务主要用来响应 Chaincode 的相关调用。<br><img src="/img/fabric/chaincode.png" alt="Chaincode_handle"></p></li><li><p>Chaincode docker<br>大家已经知道 fabric 的 Chaincode 是通过 Docker 运行的，那其中到底是个什么逻辑呢？ 我们来跟踪一下。前面已经知道 Chaincode-support 服务启动后，从 Created 状态一直到 Ready 状态，这时就可以开始处理链码相关调用了，如下面这样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Handler)</span> <span class="title">handleMessageReadyState</span><span class="params">(msg *pb.ChaincodeMessage)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">   <span class="keyword">switch</span> msg.Type &#123;</span><br><span class="line">   <span class="keyword">case</span> pb.ChaincodeMessage_COMPLETED, pb.ChaincodeMessage_ERROR:</span><br><span class="line">       h.Notify(msg)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">case</span> pb.ChaincodeMessage_PUT_STATE:</span><br><span class="line">       <span class="keyword">go</span> h.HandleTransaction(msg, h.HandlePutState)</span><br><span class="line">   <span class="keyword">case</span> pb.ChaincodeMessage_DEL_STATE:</span><br><span class="line">       <span class="keyword">go</span> h.HandleTransaction(msg, h.HandleDelState)</span><br><span class="line">   <span class="keyword">case</span> pb.ChaincodeMessage_INVOKE_CHAINCODE:</span><br><span class="line">       <span class="keyword">go</span> h.HandleTransaction(msg, h.HandleInvokeChaincode)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">case</span> pb.ChaincodeMessage_GET_STATE:</span><br><span class="line">       <span class="keyword">go</span> h.HandleTransaction(msg, h.HandleGetState)</span><br><span class="line">   <span class="keyword">case</span> pb.ChaincodeMessage_GET_STATE_BY_RANGE:</span><br><span class="line">       <span class="keyword">go</span> h.HandleTransaction(msg, h.HandleGetStateByRange)</span><br><span class="line">   <span class="keyword">case</span> pb.ChaincodeMessage_GET_QUERY_RESULT:</span><br><span class="line">       <span class="keyword">go</span> h.HandleTransaction(msg, h.HandleGetQueryResult)</span><br><span class="line">   <span class="keyword">case</span> pb.ChaincodeMessage_GET_HISTORY_FOR_KEY:</span><br><span class="line">       <span class="keyword">go</span> h.HandleTransaction(msg, h.HandleGetHistoryForKey)</span><br><span class="line">   <span class="keyword">case</span> pb.ChaincodeMessage_QUERY_STATE_NEXT:</span><br><span class="line">       <span class="keyword">go</span> h.HandleTransaction(msg, h.HandleQueryStateNext)</span><br><span class="line">   <span class="keyword">case</span> pb.ChaincodeMessage_QUERY_STATE_CLOSE:</span><br><span class="line">       <span class="keyword">go</span> h.HandleTransaction(msg, h.HandleQueryStateClose)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">       <span class="keyword">return</span> fmt.Errorf(<span class="string">"[%s] Fabric side handler cannot handle message (%s) while in ready state"</span>, msg.Txid, msg.Type)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中比较主要的服务 HandleInvokeChaincode，我们来看看</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Handler)</span> <span class="title">HandleInvokeChaincode</span><span class="params">()</span></span>&#123;</span><br><span class="line">   ...</span><br><span class="line">   ctxt = context.WithValue(ctxt, TXSimulatorKey, txsim)</span><br><span class="line">   ctxt = context.WithValue(ctxt, HistoryQueryExecutorKey, historyQueryExecutor)</span><br><span class="line">   ...</span><br><span class="line">   responseMessage, err := h.Invoker.Invoke(ctxt, cccid, cciSpec)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cs *ChaincodeSupport)</span> <span class="title">Invoke</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> cctyp pb.ChaincodeMessage_Type</span><br><span class="line">   <span class="keyword">switch</span> spec.(<span class="keyword">type</span>) &#123;</span><br><span class="line">   <span class="keyword">case</span> *pb.ChaincodeDeploymentSpec:</span><br><span class="line">       cctyp = pb.ChaincodeMessage_INIT</span><br><span class="line">   <span class="keyword">case</span> *pb.ChaincodeInvocationSpec:</span><br><span class="line">       cctyp = pb.ChaincodeMessage_TRANSACTION</span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"a deployment or invocation spec is required"</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 这里非常重要，这里是要启动链码，如果是普通合约，则使用Docker容器来启动</span></span><br><span class="line">   err := cs.Launch(ctxt, cccid, spec)</span><br><span class="line">   ...</span><br><span class="line">   <span class="comment">// 开始执行链码中对应的函数</span></span><br><span class="line">   <span class="keyword">return</span> cs.execute(ctxt, cccid, ccMsg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟踪 Launch</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cs *ChaincodeSupport)</span> <span class="title">Launch</span><span class="params">()</span></span>&#123;</span><br><span class="line">   ctx = context.WithValue(ctx, ccintf.GetCCHandlerKey(), cs)</span><br><span class="line">   <span class="keyword">return</span> cs.Launcher.Launch(ctx, cccid, spec)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入到 RuntimeLauncher.Launch</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RuntimeLauncher)</span> <span class="title">Launch</span><span class="params">()</span></span>&#123;</span><br><span class="line">    err := r.start(ctx, cccid, cds)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入到 RuntimeLauncher.start</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RuntimeLauncher)</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">    err := r.Runtime.Start(ctx, cccid, cds)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入到 ContainerRuntime.start</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ContainerRuntime)</span> <span class="title">Start</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> err := c.Processor.Process(ctxt, vmtype, scr); err != <span class="literal">nil</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> errors.WithMessage(err, <span class="string">"error starting container"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续到 VMController.Process</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(vmc *VMController)</span> <span class="title">Process</span><span class="params">(ctxt context.Context, vmtype <span class="keyword">string</span>, req VMCReq)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">   v := vmc.newVM(vmtype)</span><br><span class="line">   ccid := req.GetCCID()</span><br><span class="line">   id := ccid.GetName()</span><br><span class="line"></span><br><span class="line">   vmc.lockContainer(id)</span><br><span class="line">   <span class="keyword">defer</span> vmc.unlockContainer(id)</span><br><span class="line">   <span class="comment">// 根据vmtype执行相应的do， 如果是一般使用，使用dockerVM执行，如果是系统合约，则使用InporcVM执行</span></span><br><span class="line">   <span class="keyword">return</span> req.Do(ctxt, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 docker 容器，如果没有相关镜像，还要 build 一个镜像出来，再使用镜像启动容器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(vm *DockerVM)</span> <span class="title">Start</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建Docker容器，该容器中已经包含了要调用的链码程序</span></span><br><span class="line">    err = vm.createContainer(ctxt, client, imageName, containerName, args, env, attachStdout)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// 这里如果没有相关的镜像，这里还要负责编译一个镜像出来</span></span><br><span class="line">       reader, err1 := builder.Build()</span><br><span class="line">       <span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line">           dockerLogger.Errorf(<span class="string">"Error creating image builder for image &lt;%s&gt; (container id &lt;%s&gt;), "</span>+</span><br><span class="line">               <span class="string">"because of &lt;%s&gt;"</span>, imageName, containerName, err1)</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> err1 = vm.deployImage(client, ccid, args, env, reader); err1 != <span class="literal">nil</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> err1</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       dockerLogger.Debug(<span class="string">"start-recreated image successfully"</span>)</span><br><span class="line">       <span class="keyword">if</span> err1 = vm.createContainer(ctxt, client, imageName, containerName, args, env, attachStdout); err1 != <span class="literal">nil</span> &#123;</span><br><span class="line">           dockerLogger.Errorf(<span class="string">"start-could not recreate container post recreate image: %s"</span>, err1)</span><br><span class="line">           <span class="keyword">return</span> err1</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="comment">// 启动Docker容器</span></span><br><span class="line">    err = client.StartContainer(containerName, <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>回到 ChaincodeSupport.Invoke()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cs *ChaincodeSupport)</span> <span class="title">Invoke</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> cs.execute(ctxt, cccid, ccMsg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 cs.execute 函数中，ChaincodeSupport 向 docker 容器发送消息，请求执行链码对应的功能，容器中的链码收到消息后，处理请求，并返回结果。主流程并不是太复杂，下图可以总结：</p><p><img src="/img/fabric/chaincode-ps.png" alt="invoke_call"></p></li><li><p>docker build<br>现在把目光放到如何把链码编译成镜像，并启动容器上来，还记得前面的那段吧？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Builder <span class="keyword">interface</span> &#123;</span><br><span class="line">   Build() (io.Reader, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JetBrains Goland 这个工具确实很人性化，接口在哪里实现的，都会直接列出来</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Build a tar stream based on the CDS</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *PlatformBuilder)</span> <span class="title">Build</span><span class="params">()</span> <span class="params">(io.Reader, error)</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> platforms.GenerateDockerBuild(b.DeploymentSpec)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenerateDockerBuild</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   inputFiles := <span class="built_in">make</span>(InputFiles)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// ----------------------------------------------------------------------------------------------------</span></span><br><span class="line">   <span class="comment">// Determine our platform driver from the spec</span></span><br><span class="line">   <span class="comment">// ----------------------------------------------------------------------------------------------------</span></span><br><span class="line">   platform, err := _Find(cds.ChaincodeSpec.Type)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Failed to determine platform type: %s"</span>, err)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// ----------------------------------------------------------------------------------------------------</span></span><br><span class="line">   <span class="comment">// Generate the Dockerfile specific to our context</span></span><br><span class="line">   <span class="comment">// ----------------------------------------------------------------------------------------------------</span></span><br><span class="line">   dockerFile, err := _generateDockerfile(platform, cds)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Failed to generate a Dockerfile: %s"</span>, err)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   inputFiles[<span class="string">"Dockerfile"</span>] = dockerFile</span><br><span class="line"></span><br><span class="line">   <span class="comment">// ----------------------------------------------------------------------------------------------------</span></span><br><span class="line">   <span class="comment">// Finally, launch an asynchronous process to stream all of the above into a docker build context</span></span><br><span class="line">   <span class="comment">// ----------------------------------------------------------------------------------------------------</span></span><br><span class="line">   input, output := io.Pipe()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">       gw := gzip.NewWriter(output)</span><br><span class="line">       tw := tar.NewWriter(gw)</span><br><span class="line">       err := _generateDockerBuild(platform, cds, inputFiles, tw)</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">           logger.Error(err)</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       tw.Close()</span><br><span class="line">       gw.Close()</span><br><span class="line">       output.CloseWithError(err)</span><br><span class="line">   &#125;()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> input, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数干了 3 件事</p><ul><li>判断是哪种语言编写的链码<br>fabric-1.2.1 已经开始支持 4 种语言的链码了，golang/java/car/javascrit，不同的语言环境，需要不同的编译工具和依赖环境，最终将链码打包成一个可执行的程序，这里以 golang 语言为例分析。</li><li>生成一个 Dockerfile 文件，熟悉 Docker 的同学看到这里，可以已经有点眉目了。</li><li>启动一个 ccenv 容器编译链码，并生成一个新的镜像文件，专用于执行链码</li></ul><p>我们来看一下第 2 步，生成的 Dockerfile 文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(goPlatform *Platform)</span> <span class="title">GenerateDockerfile</span><span class="params">(cds *pb.ChaincodeDeploymentSpec)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> buf []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">   buf = <span class="built_in">append</span>(buf, <span class="string">"FROM "</span>+cutil.GetDockerfileFromConfig(<span class="string">"chaincode.golang.runtime"</span>))</span><br><span class="line">   buf = <span class="built_in">append</span>(buf, <span class="string">"ADD binpackage.tar /usr/local/bin"</span>)</span><br><span class="line"></span><br><span class="line">   dockerFileContents := strings.Join(buf, <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> dockerFileContents, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常典型的 Dockfile 文件，进入在一个正在运行 peer 的容器，查看/etc/hyperledger/img/fabric/core.yml 文件，最终出来的大概是如下这个样子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; FROM $(BASE_DOCKER_NS)&#x2F;fabric-baseos:$(ARCH)-$(BASE_VERSION)</span><br><span class="line">FROM hyperledger&#x2F;fabric-baseos:amd64-0.4.13</span><br><span class="line">ADD binpackage.tar &#x2F;usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure><p>这个 Dockerfile 要求一个 binpackage.tar 文件，这个文件在哪呢？ 接着往下看</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(goPlatform *Platform)</span> <span class="title">GenerateDockerBuild</span><span class="params">(cds *pb.ChaincodeDeploymentSpec, tw *tar.Writer)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">   spec := cds.ChaincodeSpec</span><br><span class="line">   ...</span><br><span class="line">   codepackage := bytes.NewReader(cds.CodePackage)</span><br><span class="line">   binpackage := bytes.NewBuffer(<span class="literal">nil</span>)</span><br><span class="line">   err = util.DockerBuild(util.DockerBuildOptions&#123;</span><br><span class="line">       Cmd:          fmt.Sprintf(<span class="string">"GOPATH=/chaincode/input:$GOPATH go build -tags \"%s\" %s -o /chaincode/output/chaincode %s"</span>, gotags, ldflagsOpt, pkgname),</span><br><span class="line">       InputStream:  codepackage,</span><br><span class="line">       OutputStream: binpackage,</span><br><span class="line">   &#125;)</span><br><span class="line">   ...</span><br><span class="line">   <span class="keyword">return</span> cutil.WriteBytesToPackage(<span class="string">"binpackage.tar"</span>, binpackage.Bytes(), tw)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到 Cmd 那行，看起来是不是用 go build 在编译 go 代码？<br>其中 util.DockerBuild()如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DockerBuild</span><span class="params">(opts DockerBuildOptions)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">   client, err := cutil.NewDockerClient()</span><br><span class="line">   ...</span><br><span class="line">   <span class="comment">// 这里镜像文件是 hyperledger/fabric-ccenv:latest</span></span><br><span class="line">   <span class="keyword">if</span> opts.Image == <span class="string">""</span> &#123;</span><br><span class="line">       opts.Image = cutil.GetDockerfileFromConfig(<span class="string">"chaincode.builder"</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//-----------------------------------------------------------------------------------</span></span><br><span class="line">   <span class="comment">// 确认镜像是否存在，如果没有，则先使用docker pull下载镜像文件</span></span><br><span class="line">   <span class="comment">//-----------------------------------------------------------------------------------</span></span><br><span class="line">   _, err = client.InspectImage(opts.Image)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       logger.Debugf(<span class="string">"Image %s does not exist locally, attempt pull"</span>, opts.Image)</span><br><span class="line"></span><br><span class="line">       err = client.PullImage(docker.PullImageOptions&#123;Repository: opts.Image&#125;, docker.AuthConfiguration&#123;&#125;)</span><br><span class="line">       <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> fmt.Errorf(<span class="string">"Failed to pull %s: %s"</span>, opts.Image, err)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//-----------------------------------------------------------------------------------</span></span><br><span class="line">   <span class="comment">// Upload our input stream</span></span><br><span class="line">   <span class="comment">//-----------------------------------------------------------------------------------</span></span><br><span class="line">   err = client.UploadToContainer(container.ID, docker.UploadToContainerOptions&#123;</span><br><span class="line">       Path:        <span class="string">"/chaincode/input"</span>,</span><br><span class="line">       InputStream: opts.InputStream,</span><br><span class="line">   &#125;)</span><br><span class="line">   ...</span><br><span class="line">   err = client.StartContainer(container.ID, <span class="literal">nil</span>)</span><br><span class="line">   ...</span><br><span class="line">   retval, err := client.WaitContainer(container.ID)</span><br><span class="line">   ...</span><br><span class="line">   err = client.DownloadFromContainer(container.ID, docker.DownloadFromContainerOptions&#123;</span><br><span class="line">       Path:         <span class="string">"/chaincode/output/."</span>,</span><br><span class="line">       OutputStream: opts.OutputStream,</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里大概意思是使用 hyperledger/ccenv 这个镜像来编译链码，被编译出的可执行文件为/chaincode/output/chaincode，并将 docker 里的/chaincode/output/这个目录的内容打包，最终生成前面所需要的 binpackage.tar，最终再根据 Dockerfile 生成了我们需要的镜像文件。到这里为止，链码镜像的生成就算是结束了，不过还有个小的问题:</p><ul><li><p>链码编译的时候的依赖是怎么解决的<br>这里我们看一看 ccenv 这个镜像是怎么生成的(images/ccenv/Dockerfile.in)</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> _BASE_NS_/fabric-baseimage:_BASE_TAG_</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> payload/chaintool payload/protoc-gen-go /usr/<span class="built_in">local</span>/bin/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> payload/goshim.tar.bz2 <span class="variable">$GOPATH</span>/src/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /chaincode/input /chaincode/output</span></span><br></pre></td></tr></table></figure><p>其中有一行将 goshim.tar.bz2 拷贝到$GOPATH/src目录，$GOPATH/src 目录下一般放的都 go 的源码，go 程序在编译的时候会在这个目录下搜索相关的库，那这里 goshim.tar.bz2 是又是怎么来的？</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GOSHIM_DEPS = <span class="variable">$(<span class="built_in">shell</span> ./scripts/goListFiles.sh <span class="variable">$(PKGNAME)</span>/core/chaincode/shim)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(BUILD_DIR)</span>/goshim.tar.bz2: <span class="variable">$(GOSHIM_DEPS)</span></span><br><span class="line">    @echo <span class="string">"Creating <span class="variable">$@</span>"</span></span><br><span class="line">    @tar -jhc -C <span class="variable">$(GOPATH)</span>/src <span class="variable">$(<span class="built_in">patsubst</span> <span class="variable">$(GOPATH)</span>/src/%,%,<span class="variable">$(GOSHIM_DEPS)</span>)</span> &gt; <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(BUILD_DIR)</span>/image/ccenv/payload:      <span class="variable">$(BUILD_DIR)</span>/docker/gotools/bin/protoc-gen-go \</span><br><span class="line">        <span class="variable">$(BUILD_DIR)</span>/bin/chaintool \</span><br><span class="line">        <span class="variable">$(BUILD_DIR)</span>/goshim.tar.bz2</span><br></pre></td></tr></table></figure><p>我们看 goshim.tar.bz2 这个压缩文件，是通过一个脚本得到 GOSHIM_DEPS，再把 GOSHIM_DEPS 打成 tar.bz2 包</p><p><img src="/img/fabric/chaincode-build.png" alt="docker-build"></p></li></ul></li><li><p>shim<br>在没看代码之间，一直不理解 shim(垫片)是个啥？大家在编写 Chaincode 的时候是不是总有这么一段：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">// Create a new Smart Contract</span></span><br><span class="line">   err := shim.Start(<span class="built_in">new</span>(SmartContract))</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       fmt.Printf(<span class="string">"Error creating new Smart Contract: %s"</span>, err)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一段其实是在 Docker 容器里执行的，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// chaincodes.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Start</span><span class="params">(cc Chaincode)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">   <span class="comment">//mock stream not set up ... get real stream</span></span><br><span class="line">   <span class="keyword">if</span> streamGetter == <span class="literal">nil</span> &#123;</span><br><span class="line">       streamGetter = userChaincodeStreamGetter</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   stream, err := streamGetter(chaincodename)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> err</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   err = chatWithPeer(chaincodename, stream, cc)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>合约里调用 shim.Start()，就对应到了下面的这面代码，这里主要的用途是建立一个对话的通道，将来 peer 和 docker 的消息交换都是这个通道进行。</p></li></ul></li><li><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>内容有点多，其实有 2 大块内容，</p><ul><li>SDK/peer/docker 是如何互相配合的</li><li>链码是如何被编译成镜像，运行起来的</li><li>shim(垫片)</li></ul></li><li><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://read.douban.com/ebook/57504608/" target="_blank" rel="noopener">Hyperledger Fabric 源代码分析与深入解读</a></li><li><a href="https://hk.saowen.com/a/2dbad2b467f6331a5ad8e73d46500aa5efa9b848f30b5dfdcca0b475bbddb860" target="_blank" rel="noopener">Hyperledger Chaincode 啟動過程-掃文資訊</a></li><li><a href="https://grpc.io/" target="_blank" rel="noopener">grpc</a></li><li><a href="https://github.com/spf13/viper" target="_blank" rel="noopener">viper</a></li><li><a href="https://blog.jetbrains.com/go/2018/04/30/debugging-containerized-go-applications/" target="_blank" rel="noopener">Debugging containerized Go applications</a></li><li><a href="https://github.com/spf13/cobra" target="_blank" rel="noopener">cobra</a></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近花了大概 2 个星期左右阅读了 fabric-1.2.1 中与 peer 相关的源码，着重阅读了与 Chaincode
      
    
    </summary>
    
    
      <category term="code" scheme="http://marryton007.github.io/categories/code/"/>
    
    
      <category term="blockchain" scheme="http://marryton007.github.io/tags/blockchain/"/>
    
      <category term="fabric" scheme="http://marryton007.github.io/tags/fabric/"/>
    
      <category term="hyperledge" scheme="http://marryton007.github.io/tags/hyperledge/"/>
    
  </entry>
  
  <entry>
    <title>proxmox 集群搭建</title>
    <link href="http://marryton007.github.io/2018/11/08/proxmox/proxmox-setup/"/>
    <id>http://marryton007.github.io/2018/11/08/proxmox/proxmox-setup/</id>
    <published>2018-11-08T06:17:39.000Z</published>
    <updated>2022-05-21T02:53:38.016Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>刚到公司的时候，公司分了一台服务器，非常开心的装了 Centos7，跑了几个服务：</p><ul><li>GETH 私链</li><li>BTC 测试网络</li><li>BTC 私链</li><li>EOS 测试网络</li><li>…</li></ul><p>随着服务的增多，悲剧了，各个服务依赖的库、工具和服务不同，在一个环境里容易混乱，逐考虑使用虚拟机(VM)或是容器来进行管理。这里有 2 个选择：</p><ul><li>K8S(Kubernetes)</li><li>Proxmox</li></ul><p>这里先不说 K8S，相对而言 K8S 比较复杂，短时间难以上手，以后有时间再弄。本人是无意中看到有人在玩 Proxmox 的，proxmox 本身概念比较简单，就一个管理 KVM 和 LXC 容器的平台，基于 Debian 制作，使用也简单，通过 WEB 界面就能完成绝大部分的工作；本人认为 Proxmox 的文档和论坛也比较友好，写得简单易懂。基于这些优点，Proxmox 上手非常快，我也才折腾了 2 周。</p></li><li><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>这里准备 3 台机器，分别为：</p><ul><li>pve1 192.168.50.237</li><li>pve2 192.168.50.236</li><li>pve3 192.168.50.159<br>3 台机器, 128G SSD + 1T HDD, 16G 内存，分配好静态 IP。</li></ul></li><li><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载<a href="https://www.proxmox.com/en/" target="_blank" rel="noopener">proxmox 官网</a>最新版 IOS 镜像(5.2), 使用<a href="https://etcher.io/" target="_blank" rel="noopener">烧录工具 etcher</a>写入 U 盘，使用 U 盘安装 Proxmox 系统， 统一安装在 SSD 上，安装过程不到 10 分钟，最重要的是设置好密码和网络信息。</p></li><li><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>随便选 1 台机器做主控机，这里使用 pve1, 先进入 pve1 的终端命令控制台，直接登录或 SSH 都可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pvecm create YOUR-CLUSTER-NAME</span><br></pre></td></tr></table></figure><p>依次进入其他机器, 执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pvecm add 192.168.50.237(pve1 ip)</span><br></pre></td></tr></table></figure><p>回到 pve1, 查看集群状态, 如果是如下状态，基本上可以了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">root@pve1:~# pvecm status</span><br><span class="line">Quorum information</span><br><span class="line">------------------</span><br><span class="line">Date:             Fri Sep 21 20:05:24 2018</span><br><span class="line">Quorum provider:  corosync_votequorum</span><br><span class="line">Nodes:            3</span><br><span class="line">Node ID:          0x00000001</span><br><span class="line">Ring ID:          3/216</span><br><span class="line">Quorate:          Yes</span><br><span class="line"></span><br><span class="line">Votequorum information</span><br><span class="line">----------------------</span><br><span class="line">Expected votes:   3</span><br><span class="line">Highest expected: 3</span><br><span class="line">Total votes:      3</span><br><span class="line">Quorum:           2</span><br><span class="line">Flags:            Quorate</span><br><span class="line"></span><br><span class="line">Membership information</span><br><span class="line">----------------------</span><br><span class="line">    Nodeid      Votes Name</span><br><span class="line">0x00000003          1 192.168.50.159</span><br><span class="line">0x00000002          1 192.168.50.236</span><br><span class="line">0x00000001          1 192.168.50.237 (local)</span><br></pre></td></tr></table></figure><p>打开 pve1 的 web 控制台，即可看到 3 台机器了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://192.168.50.237:8006</span><br></pre></td></tr></table></figure><p><img src="/img/pve/big-picture.png" alt="全局图"></p></li><li><h2 id="添加-NFS-存储和-Disk"><a href="#添加-NFS-存储和-Disk" class="headerlink" title="添加 NFS 存储和 Disk"></a>添加 NFS 存储和 Disk</h2><ul><li>NFS<br>在 Web 控制台使用如下方式添加 NFS 存储，创建好的 NFS 是会在集群中共享的，即任何一个节点都可访问该 NFS 存储<br>Datacenter –&gt; Storage –&gt; NFS 在弹出的对话框中，添加 NFS 服务地址及导出的路径，最后确认即可。</li></ul><p><img src="/img/pve/nfs1.png" alt="nfs1"></p><p><img src="/img/pve/nfs.png" alt="nfs"></p><ul><li>Disk<br>在 Web 控制台上添加 Disk<br>pve1 –&gt; Disks –&gt; LVM –&gt; Create: Volume Group 在弹出的对话框中，选择未使用的 HDD 硬盘(要求硬盘未分区，如果有，请先使用 Fdisk 工具抹除分区信息表)，添加即可。</li></ul><p><img src="/img/pve/disk.png" alt="disk1"></p><p><img src="/img/pve/disk2.png" alt="disk2"></p></li><li><h2 id="上传-iso-镜像和下载-lxc-容器模板"><a href="#上传-iso-镜像和下载-lxc-容器模板" class="headerlink" title="上传 iso 镜像和下载 lxc 容器模板"></a>上传 iso 镜像和下载 lxc 容器模板</h2><p>在新建虚拟机(VM)和 Lxc 容器之前，需要先下载好相关的 ISO 镜像或是容器模板</p><ul><li><p>iso 镜像<br>在 Web 控制台上传 ISO 镜像<br>nfs(pve1) –&gt; Upload –&gt; select file(选择要上传的 ISO 镜像文件) –&gt; 点击 upload<br><img src="/img/pve/upload.png" alt="upload"><br><img src="/img/pve/upload2.png" alt="uplaod2"></p></li><li><p>lxc 模板<br>在 Web 控制台下载 lxc 模板<br>nfs(pve1) –&gt; Templates –&gt; 选择要下载的模板 –&gt; download<br><img src="/img/pve/lxc.png" alt="lxc"><br><img src="/img/pve/lxc2.png" alt="lxc2"></p></li></ul></li><li><h2 id="创建-VM-和-Lxc，启动，停止，克隆"><a href="#创建-VM-和-Lxc，启动，停止，克隆" class="headerlink" title="创建 VM 和 Lxc，启动，停止，克隆"></a>创建 VM 和 Lxc，启动，停止，克隆</h2><ul><li>创建虚拟机(VM)<br>Web 控制台–&gt; Create VM(右上角) –&gt; 按向导操作，依次选定如下信息：</li></ul><ol><li>general, 一般信息，主要设置 VM 名称，其他保持默认就好</li><li>OS，操作系统，这里会用到前面上传 ISO 镜像</li><li>Disk，设定磁盘大小</li><li>CPU，设定 CPU 及核数量</li><li>Memory，设定内存大小</li><li>Network，设定网络类型，是静态 IP 叿 DHCP 等</li><li>Finish, 创建完成<br><img src="/img/pve/create.png" alt="Create"><br><img src="/img/pve/create2.png" alt="Create"></li></ol><ul><li>创建容器(lxc container)<br>创建容器过程与 VM 创建过程类似，有少许不同，Web 控制台–&gt; Create CT(右上角) –&gt; 按向导操作，依次选定如下信息：</li></ul><ol><li>general，一般信息，须设定 hostname，root 密码等</li><li>template， 选择前面下载好的模板</li><li>Root Disk， 根磁盘，设定大小</li><li>CPU</li><li>Memory</li><li>Network</li><li>DNS</li><li>Confirm &amp; finish<br><img src="/img/pve/lxc-create.png" alt="lxc_create"><br><img src="/img/pve/lxc-create2.png" alt="lxc_create2"></li></ol><ul><li>启动，停止与克隆</li></ul><ol><li>在左侧列表中选择 1 台 VM 或容器</li><li>点击右上角相关按钮<br><img src="/img/pve/control.png" alt="lxc_create2"></li></ol></li><li><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><ul><li><p>为什么不使用 Ceph 分布式文件系统<br>答： Ceph 看起来很美好，但在资源有限环境中不建议使用，我原来也把 ceph 折腾到 Proxmox 集群里了，但后面发现非常卡，甚至还不如本地磁盘的性能，所以就删除了 Ceph</p></li><li><p>如何快速克隆<br>答： Proxmox 自带的克隆比较慢，对虚拟机(VM)的克隆推荐使用<a href="https://clonezilla.org/downloads/download.php?branch=stable" target="_blank" rel="noopener">clonezilla</a>，其类似于 windows 上的 ghost(磁盘克隆工具)，使用办法是先下载<a href="https://clonezilla.org/downloads/download.php?branch=stable" target="_blank" rel="noopener">clonezilla</a>的镜像，替换 VM 的光驱镜像，设定 VM 从光驱引导即可。</p></li></ul></li><li><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li><a href="https://www.proxmox.com/en/" target="_blank" rel="noopener">proxmox 官网</a></li><li><a href="https://etcher.io/" target="_blank" rel="noopener">烧录工具 etcher</a></li><li><a href="https://clonezilla.org/downloads/download.php?branch=stable" target="_blank" rel="noopener">clonezilla</a></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;刚到公司的时候，公司分了一台服务器，非常开心的装了 Centos7，跑了几个服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GETH 私
      
    
    </summary>
    
    
      <category term="cluster" scheme="http://marryton007.github.io/categories/cluster/"/>
    
    
      <category term="proxmox" scheme="http://marryton007.github.io/tags/proxmox/"/>
    
      <category term="cluster" scheme="http://marryton007.github.io/tags/cluster/"/>
    
  </entry>
  
  <entry>
    <title>使用composer+k8s部署hyperledger fabric 1.1.0</title>
    <link href="http://marryton007.github.io/2018/04/22/blockchain/composer-k8s-fabric-deploy/"/>
    <id>http://marryton007.github.io/2018/04/22/blockchain/composer-k8s-fabric-deploy/</id>
    <published>2018-04-22T06:17:39.000Z</published>
    <updated>2022-05-21T02:53:38.016Z</updated>
    
    <content type="html"><![CDATA[<p>最近在<a href="https://github.com/marryton007/hyperledger-fabric-k8s" target="_blank" rel="noopener">K8s 上升级了 fabric 网络</a>, 然后想结合<a href="https://hyperledger.github.io/composer/latest/index.html" target="_blank" rel="noopener">Hyperledger Composer</a>来部署一些例子。中间遇到了一些问题，走了一些弯路，在<a href="https://github.com/marryton007/composer-work" target="_blank" rel="noopener">这里记录</a>下来。其实问题答案很简单，一些没注意的地方。</p><p>首先说一下背景，在这篇<a href="https://hyperledger.github.io/composer/latest/tutorials/deploy-to-fabric-multi-org" target="_blank" rel="noopener">部署 Fabric 多组织</a>的教程中，最重要的是其中的连接描述文件，这个文件中描述了整个 Fabric 网络的结构，如有几个组织？每个组织下有几个 Peer？有多少个 Orderer？有哪些通道？又有哪些 Peer 加入了通道？连接时是否使用 TLS？等等。在依照教程走完后，又尝试在原先的 K8s 环境中也进行一次部署，这里就产生问题了。</p><ol><li><p>在 k8s 中无法正常导入 network card</p><ul><li><p>教程中使用 TLS 连接各 Peer 节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;peer1.org1.example.com&quot;: &#123;</span><br><span class="line">  &quot;url&quot;: &quot;grpcs:&#x2F;&#x2F;localhost:8051&quot;,</span><br><span class="line">  &quot;eventUrl&quot;: &quot;grpcs:&#x2F;&#x2F;localhost:8053&quot;,</span><br><span class="line">  &quot;grpcOptions&quot;: &#123;</span><br><span class="line">    &quot;ssl-target-name-override&quot;: &quot;peer1.org1.example.com&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tlsCACerts&quot;: &#123;</span><br><span class="line">    &quot;pem&quot;: &quot;-----BEGIN CERTIFICATE-----\nMIICSTCCAe+gAwIBAgIQUF0P&#x2F;...&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>K8S 中没有使用 TLS 方式<strong><em>(错误)</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;peer1.org1.example.com&quot;: &#123;</span><br><span class="line">  &quot;url&quot;: &quot;grpcs:&#x2F;&#x2F;localhost:8051&quot;,</span><br><span class="line">  &quot;eventUrl&quot;: &quot;grpcs:&#x2F;&#x2F;localhost:8053&quot;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>正确的方式(<strong><em>注意区分 grpcs 和 grpc</em></strong>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;peer1.org1.example.com&quot;: &#123;</span><br><span class="line">  &quot;url&quot;: &quot;grpc:&#x2F;&#x2F;localhost:8051&quot;,</span><br><span class="line">  &quot;eventUrl&quot;: &quot;grpc:&#x2F;&#x2F;localhost:8053&quot;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>怎么发现的</p><p>在<a href="https://github.com/marryton007/composer-work" target="_blank" rel="noopener">这个项目</a>中，运行脚本时有条命令执行失败</p><p><code>composer card import -f PeerAdmin@byfn-network-org1.card ... PEM encoded certificate is required.</code></p><p>这里使用了 Nodejs 的 Inspect 功能</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --inspect-brk ~&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v8.11.1&#x2F;bin&#x2F;composer card import -f PeerAdmin@byfn-network-org1.card</span><br></pre></td></tr></table></figure></code></pre><p>在 Google 浏览器打开 chrome://inspect</p><p><img src="http://ou36ephoe.bkt.clouddn.com/15244705012669.jpg" alt=""></p><p>打开右上角的 pause on caught exception 开关</p><p><img src="http://ou36ephoe.bkt.clouddn.com/15244705472639.jpg" alt=""></p><p>在跳过前几次异常后，会跳到~/.nvm/versions/node/v8.11.1/lib/node_modules/composer-cli/node_modules/fabric-client/lib/Remote.js 这个文件中这一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (protocol &#x3D;&#x3D;&#x3D; &#39;grpc&#39;) &#123;</span><br><span class="line">  this.addr &#x3D; purl.host;</span><br><span class="line">  this.creds &#x3D; grpc.credentials.createInsecure();</span><br><span class="line">&#125; else if (protocol &#x3D;&#x3D;&#x3D; &#39;grpcs&#39;) &#123;</span><br><span class="line">  if(!(typeof pem &#x3D;&#x3D;&#x3D; &#39;string&#39;)) &#123;</span><br><span class="line">    throw new Error(&#39;PEM encoded certificate is required.&#39;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当时看到这里时，顿时就是明白了，grpcs 代表 TLS 连接，而 grpc 则代表非加密连接，修改连接配置文件，代码成功执行。</p></li></ul></li><li><p>在 k8s，无法正常执行 composer network start,也即无法实例化 Chainacode</p><pre><code>这个问题折腾了一个下午，通过查看容器日志，发现在执行Chaincode实例化的化时候，需要生成类似如下镜像文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    deploy@devops2:~$ docker images |ag dev</span><br><span class="line"></span><br><span class="line">dev-peer0.org2-trade-network-0.2.4-deploy.0-xxx</span><br><span class="line">&#96;其中peer0.org2是节点名字，表示组织2上的peer0这个节点，trade-network是composer生成的Business Network名称，0.2.4-deploy.0是Business Network的版本号，这个镜像一开始是没有的，需要根据hyperledger&#x2F;fabric-ccenv构建出来，在我们的这个K8S环境中，就是这个镜像构建失败，导致Chaincode无法实例化而出现问题。这也是1.1.0这个版本与前几个版本的一个区别，在构建镜像的过程中，需要通过NPM下载一些工具，却发现NPM下载失败。 一开始我还怀疑是不是翻墙的问题，结果发现是Docker容器启动后根本就无法连接网络，这就郁闷了。这里用到了一些测试工具。&#96;</span><br><span class="line">docker run -it webwurst&#x2F;curl-utils &gt; ping www.baidu.com &gt; curl -v www.baidu.com</span><br><span class="line">&#96;问题的根本原因：错误的docker启动项&#96;</span><br><span class="line">deploy@devops2:~\$ cat &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d&#x2F;docker-options.conf</span><br><span class="line">[Service]</span><br><span class="line">Environment&#x3D;&quot;DOCKER_OPTS&#x3D;--insecure-registry&#x3D;10.233.0.0&#x2F;18 --graph&#x3D;&#x2F;var&#x2F;lib&#x2F;docker --log-opt max-size&#x3D;50m --log-opt max-file&#x3D;5 --iptables&#x3D;false&quot;</span><br></pre></td></tr></table></figure></code></pre><p> 在 dockerd 的 man 手册页里面，–iptables 默认为 true，不知道为什么这里设置成了 false，删除掉这个选项后，系统工作正常了。</p><pre><code></code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在&lt;a href=&quot;https://github.com/marryton007/hyperledger-fabric-k8s&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;K8s 上升级了 fabric 网络&lt;/a&gt;, 然后想结合&lt;a href=&quot;h
      
    
    </summary>
    
    
      <category term="blockchain" scheme="http://marryton007.github.io/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="http://marryton007.github.io/tags/blockchain/"/>
    
      <category term="hyperledger" scheme="http://marryton007.github.io/tags/hyperledger/"/>
    
      <category term="composer" scheme="http://marryton007.github.io/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>以太坊节点geth json rpc使用指南</title>
    <link href="http://marryton007.github.io/2018/04/13/blockchain/geth-json-rpc/"/>
    <id>http://marryton007.github.io/2018/04/13/blockchain/geth-json-rpc/</id>
    <published>2018-04-13T06:17:39.000Z</published>
    <updated>2022-05-21T02:53:38.016Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/ethereum/go-ethereum/wiki/Management-APIs" target="_blank" rel="noopener">https://github.com/ethereum/go-ethereum/wiki/Management-APIs</a></li><li><a href="https://github.com/ethereum/wiki/wiki/JSON-RPC" target="_blank" rel="noopener">https://github.com/ethereum/wiki/wiki/JSON-RPC</a></li><li><a href="https://solidity.readthedocs.io/en/develop/abi-spec.html" target="_blank" rel="noopener">https://solidity.readthedocs.io/en/develop/abi-spec.html</a></li></ul></li><li><h4 id="新建账号"><a href="#新建账号" class="headerlink" title="新建账号"></a>新建账号</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    curl -X POST --data &#39;&#123;</span><br><span class="line">      &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">      &quot;method&quot;: &quot;personal_newAccount&quot;,</span><br><span class="line">      &quot;params&quot;: [&quot;hello&quot;],     &#x2F;&#x2F; 新帐户密码</span><br><span class="line">      &quot;id&quot;: 3</span><br><span class="line"></span><br><span class="line">&#125;&#39; localhost:8545</span><br><span class="line">&#96;返回结果&#96;</span><br><span class="line">&#123;</span><br><span class="line">&quot;id&quot;: 4,</span><br><span class="line">&quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">&quot;result&quot;: &quot;0xb14dc5a4bba7fc2796b41543c76aa7da732a7271&quot; &#x2F;&#x2F; 新帐户地址</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3.  #### 查询余额</span><br></pre></td></tr></table></figure><p>{<br>  “jsonrpc”: “2.0”,<br>  “method”: “eth_getBalance”,<br>  “params”: [“0x627306090abaB3A6e1400e9345bC60c78a8BEf57”],  //帐户地址<br>  “id”: 3<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">返回结果</span><br></pre></td></tr></table></figure><p>{<br>  “id”: 3,<br>  “jsonrpc”: “2.0”,<br>  “result”: “0x00000000000000056bc75e2d63100000”  //以wei为单位，十六进制形式，转换成十进制为 100000000000000000000，即100ETH<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4.  #### 以太币转账</span><br></pre></td></tr></table></figure><p>curl -X POST –data ‘{<br>  “jsonrpc”: “2.0”,<br>  “method”: “eth_sendTransaction”,<br>  “params”: [{</p><pre><code>&quot;from&quot;: &quot;0x627306090abaB3A6e1400e9345bC60c78a8BEf57&quot;,   // 转出帐户&quot;to&quot;: &quot;0xf17f52151EbEF6C7334FAD080c5704D77216b732&quot;,     // 转入帐户&quot;gas&quot;: &quot;0x76c0&quot;,                                        // gas&quot;gasPrice&quot;: &quot;0x9184e72a000&quot;,                            // gas单价&quot;value&quot;: &quot;0x8AC7230489E80000&quot;,                          // 转账金额&quot;data&quot;: &quot;0x0&quot;</code></pre><p>  }],<br>  “id”: 3}’ localhost:8545</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">返回结果</span><br></pre></td></tr></table></figure><p>  {<br>  “id”: 3,<br>  “jsonrpc”: “2.0”,<br>  “result”: “0x126bd21f39f23b7c6df8fe3e205fd592fe9dcb47abb3e356b96bff98ea58e137”   // 交易Hash<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">5.  #### Token 转账</span><br><span class="line"></span><br><span class="line">        * Token信息</span><br></pre></td></tr></table></figure><pre><code>Token contract address:  0x8cdaf0cd259887258bc13a92c0a6da92698644c0Token 代号: JXCToken decimals(小数点位数): 2<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 信息结构</span><br></pre></td></tr></table></figure>接收地址：　0xf17f52151EbEF6C7334FAD080c5704D77216b732    (40字母长度)value:  128data内容拼接：0xa9059cbb +  左补位token接收地址 + 左补位value<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 信息具体构造方法</span><br></pre></td></tr></table></figure>其中token接收地址和value要在前面补0，直到长度满足64个字母，如下：Token地址前要加24个0，value作如下转换： 128*10^合约的小数位，这里是2，转成16进制，再在前面补0，长度满足64位字母128*100 = 12800hex(12800) = 3200data内容最终为：</code></pre><p>0xa9059cbb000000000000000000000000f17f52151EbEF6C7334FAD080c5704D77216b7320000000000000000000000000000000000000000000000000000000000003200</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* curl请求示例</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;</span><br><span class="line">curl -X POST --data &#39;&#123;</span><br><span class="line">  &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">  &quot;method&quot;: &quot;eth_sendTransaction&quot;,</span><br><span class="line">  &quot;params&quot;: [&#123;</span><br><span class="line">    &quot;from&quot;: &quot;0x627306090abaB3A6e1400e9345bC60c78a8BEf57&quot;,   &#x2F;&#x2F; 转出帐户</span><br><span class="line">    &quot;to&quot;: &quot;0x8cdaf0cd259887258bc13a92c0a6da92698644c0&quot;,     &#x2F;&#x2F; Token合约地址</span><br><span class="line">    &quot;gas&quot;: &quot;0x186A0&quot;,                                       &#x2F;&#x2F; gas</span><br><span class="line">    &quot;gasPrice&quot;: &quot;0x9184e72a000&quot;,                            &#x2F;&#x2F; gas单价</span><br><span class="line">    &quot;value&quot;: &quot;0x0&quot;,                          &#x2F;&#x2F;</span><br><span class="line">    &quot;data&quot;: &quot;0xa9059cbb000000000000000000000000f17f52151EbEF6C7334FAD080c5704D77216b7320000000000000000000000000000000000000000000000000000000000003200&quot;</span><br><span class="line">  &#125;],</span><br><span class="line">  &quot;id&quot;: 3&#125;&#39; localhost:8545</span><br><span class="line">&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">返回结果</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: 5,</span><br><span class="line">  &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">  &quot;result&quot;: &quot;0x7f68504a79cc20aff446e8a8799845f8c1a9433c34644dcf5b7876fd1bcba30a&quot;   &#x2F;&#x2F; 交易号</span><br><span class="line">&#125;</span><br><span class="line">&#96;&#96;&#96;</span><br></pre></td></tr></table></figure></li></ol><p>6) #### 获取 Token 余额</p><ul><li><p>Token 信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Token contract address:  0x8cdaf0cd259887258bc13a92c0a6da92698644c0</span><br><span class="line">Token 代号: JXC</span><br><span class="line">Token decimals(小数点位数): 2</span><br></pre></td></tr></table></figure></li><li><p>信息结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data 数据拼接：</span><br><span class="line">0x70a08231 + 左补位的地址</span><br></pre></td></tr></table></figure></li><li><p>curl 示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST --data &#39;&#123;</span><br><span class="line">  &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">  &quot;method&quot;: &quot;eth_call&quot;,</span><br><span class="line">  &quot;params&quot;: [&#123;</span><br><span class="line">    &quot;from&quot;: &quot;0x627306090abaB3A6e1400e9345bC60c78a8BEf57&quot;,   &#x2F;&#x2F; 帐户</span><br><span class="line">    &quot;to&quot;: &quot;0x8cdaf0cd259887258bc13a92c0a6da92698644c0&quot;,     &#x2F;&#x2F; Token合约地址</span><br><span class="line">    &quot;value&quot;: &quot;0x0&quot;,                          &#x2F;&#x2F;</span><br><span class="line">    &quot;data&quot;: &quot;0x70a08231000000000000000000000000f17f52151EbEF6C7334FAD080c5704D77216b732&quot;</span><br><span class="line">  &#125;],</span><br><span class="line">  &quot;id&quot;: 3&#125;&#39; localhost:8545</span><br></pre></td></tr></table></figure></li><li><p>返回结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: 3,</span><br><span class="line">  &quot;jsonrpc&quot;: &quot;2.0&quot;,</span><br><span class="line">  &quot;result&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000003200&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提取结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3200转十进制&#x2F;10^2(Token小数点位数)</span><br><span class="line"></span><br><span class="line">0x3200 &#x3D; 12800</span><br><span class="line">12800 &#x2F; 100 &#x3D; 128 个JXC</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;h4 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ethereum/go-ethereum/wiki/M
      
    
    </summary>
    
    
      <category term="blockchain" scheme="http://marryton007.github.io/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="http://marryton007.github.io/tags/blockchain/"/>
    
      <category term="hyperledger" scheme="http://marryton007.github.io/tags/hyperledger/"/>
    
      <category term="geth" scheme="http://marryton007.github.io/tags/geth/"/>
    
  </entry>
  
  <entry>
    <title>搭建Kafka集群</title>
    <link href="http://marryton007.github.io/2017/09/28/blockchain/kafka-cluster/"/>
    <id>http://marryton007.github.io/2017/09/28/blockchain/kafka-cluster/</id>
    <published>2017-09-28T06:17:39.000Z</published>
    <updated>2022-05-21T02:53:38.016Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>因为<a href="https://www.hyperledger.org/projects/fabric" target="_blank" rel="noopener">Hyperledger Fabric</a>使用<a href="https://kafka.apache.org/" target="_blank" rel="noopener">Apache Kafka</a>来作为期 Orderer Service 的实现，所以在研究<a href="https://www.hyperledger.org/projects/fabric" target="_blank" rel="noopener">Fabric</a>的时候，也来尝试搭建一个<a href="https://kafka.apache.org/" target="_blank" rel="noopener">kafka</a>集群。</p></li><li><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://kafka.apache.org/" target="_blank" rel="noopener">Kafka</a>是由 LinkedIn 开发的一个分布式的消息系统，使用 Scala 编写，它以可水平扩展和高吞吐率而被广泛使用，其依赖于<a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">ZooKeeper</a>。<br><a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">ZooKeeper</a>是一个分布式的，开放源码的分布式应用程序协调服务，它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。<br><a href="https://www.ansible.com/" target="_blank" rel="noopener">Ansible</a>是一款简单的自动化 IT 工具。这个工具的目标有这么几项：自动化部署 APP；自动化管理配置项；自动化的持续交互；自动化的（AWS）云服务管理。即可以批量的在远程服务器上通过 SSH 执行命令，且无须额外在服务器上安装控制工具。</p></li><li><h4 id="硬件环境"><a href="#硬件环境" class="headerlink" title="硬件环境"></a>硬件环境</h4><ul><li>3 台 Ubuntu 16.04 机器</li><li>1 台 Mac，作为控制机</li></ul></li><li><h4 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h4><ul><li>3 台 Ubuntu 机器配置 ssh 服务，创建 deploy 用户(自定)，允许 deploy 用户无密码 sudo</li><li>Mac 上安装<a href="https://www.ansible.com/" target="_blank" rel="noopener">ansible</a>，设置从 Mac 用户无密码登录 Ubuntu 机器</li></ul></li><li><h4 id="关键步骤"><a href="#关键步骤" class="headerlink" title="关键步骤"></a>关键步骤</h4><ul><li><p>在 Mac 上配置<a href="https://www.ansible.com/" target="_blank" rel="noopener">Ansible</a>主机列表</p><ul><li><p>查看~/.ansible.cfg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">hostfile&#x3D;~&#x2F;.hosts    &#x2F;&#x2F;host文件位置</span><br><span class="line">hash_behaviour &#x3D; merge</span><br></pre></td></tr></table></figure></li><li><p>修改~/.hosts, 添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[kafka]</span><br><span class="line">devops0</span><br><span class="line">devops2</span><br><span class="line">devops1</span><br></pre></td></tr></table></figure></li><li><p>修改/etc/hosts 文件，添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.208   devops0</span><br><span class="line">192.168.1.207   devops1</span><br><span class="line">192.168.1.209   devops2</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在 Ubuntu 机器上安装 JAVA</p><ul><li>编写 ansible playbook 文件 install-jdk.yml<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: kafka</span><br><span class="line">  user: deploy</span><br><span class="line">  become: yes</span><br><span class="line">  become_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: install some packages</span><br><span class="line">      apt:</span><br><span class="line">        name: &quot;&#123;&#123;item&#125;&#125;&quot;</span><br><span class="line">        state: present</span><br><span class="line">      with_items:</span><br><span class="line">        - openjdk-8-jdk</span><br></pre></td></tr></table></figure></li><li>执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook install-jdk.yml</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在 Ubuntu 机器上配置<a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">Zookeeper</a>集群</p><ul><li><p>安装 zookeeper role</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-galaxy install AnsibleShipyard.ansible-zookeeper</span><br></pre></td></tr></table></figure></li><li><p>编写 playbook 文件 zookeeper-cluster.yml</p>       <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: Installing ZooKeeper</span><br><span class="line">  hosts: kafka</span><br><span class="line">  user: deploy</span><br><span class="line">  become: yes</span><br><span class="line">  become_user: root</span><br><span class="line">  roles:</span><br><span class="line">    - role: AnsibleShipyard.ansible-zookeeper</span><br><span class="line">      zookeeper_hosts: &quot;</span><br><span class="line">        &#123;%- set ips &#x3D; [] %&#125;</span><br><span class="line">        &#123;%- for host in groups[&#39;kafka&#39;] %&#125;</span><br><span class="line">        &#123;&#123;- ips.append(dict(id&#x3D;loop.index, host&#x3D;host, ip&#x3D;hostvars[host][&#39;ansible_default_ipv4&#39;].address)) &#125;&#125;</span><br><span class="line">        &#123;%- endfor %&#125;</span><br><span class="line">        &#123;&#123;- ips -&#125;&#125;&quot;</span><br></pre></td></tr></table></figure>       </li></ul></li></ul></li></ol><pre><code>- 执行  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook zookeeper-cluster.yml</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>在 ubuntu 机器上配置<a href="https://kafka.apache.org/" target="_blank" rel="noopener">Kafka</a>集群</p><ul><li><p>安装 kafka role</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-galaxy install  idealista.kafka-role</span><br></pre></td></tr></table></figure></li><li><p>编写 playbook 文件， kafaka.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: kafka</span><br><span class="line">  user: deploy</span><br><span class="line">  become: yes</span><br><span class="line">  roles:</span><br><span class="line">    - role: idealista.kafka-role</span><br><span class="line">      kafka_hosts:</span><br><span class="line">        - host: devops0</span><br><span class="line">          id: 1</span><br><span class="line">        - host: devops1</span><br><span class="line">          id: 2</span><br><span class="line">        - host: devops2</span><br><span class="line">          id: 3</span><br><span class="line">      kafka_zookeeper_hosts:</span><br><span class="line">        - 192.168.1.207:2181</span><br><span class="line">        - 192.168.1.208:2181</span><br><span class="line">        - 192.168.1.209:2181</span><br><span class="line"></span><br><span class="line">  environment:</span><br><span class="line">    http_proxy: http:&#x2F;&#x2F;192.168.2.59:1087</span><br><span class="line">    https_proxy: http:&#x2F;&#x2F;192.168.2.59:1087</span><br></pre></td></tr></table></figure></li><li><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook kafka.yml</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="6"><li><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ul><li><p>zookeeper 测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 查看节点状态</span><br><span class="line">deploy@devops2:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin$ .&#x2F;zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: &#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;conf&#x2F;zoo.cfg</span><br><span class="line">Mode: leader  &#x2F;&#x2F;节点角色</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 发送stat指令</span><br><span class="line">deploy@devops2:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin$ echo stat |nc localhost 2181</span><br><span class="line">Zookeeper version: 3.4.9-1757313, built on 08&#x2F;23&#x2F;2016 06:50 GMT</span><br><span class="line">Clients:</span><br><span class="line"> &#x2F;0:0:0:0:0:0:0:1:54100[0](queued&#x3D;0,recved&#x3D;1,sent&#x3D;0)</span><br><span class="line"></span><br><span class="line">Latency min&#x2F;avg&#x2F;max: 0&#x2F;0&#x2F;33</span><br><span class="line">Received: 6353</span><br><span class="line">Sent: 6369</span><br><span class="line">Connections: 1</span><br><span class="line">Outstanding: 0</span><br><span class="line">Zxid: 0x1000001b2</span><br><span class="line">Mode: leader</span><br><span class="line">Node count: 32</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用.&#x2F;zkCli.sh 连接到zookeeper</span><br><span class="line">deploy@devops2:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin$ .&#x2F;zkCli.sh -server localhost</span><br><span class="line">Connecting to localhost</span><br><span class="line">2017-09-28 10:02:24,947 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version&#x3D;3.4.9-1757313, built on 08&#x2F;23&#x2F;2016 06:50 GMT</span><br><span class="line">2017-09-28 10:02:24,949 [myid:] - INFO  [main:Environment@100] - Client environment:host.name&#x3D;devops2</span><br><span class="line">2017-09-28 10:02:24,949 [myid:] - INFO  [main:Environment@100] - Client environment:java.version&#x3D;1.8.0_131</span><br><span class="line">2017-09-28 10:02:24,950 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor&#x3D;Oracle Corporation</span><br><span class="line">2017-09-28 10:02:24,950 [myid:] - INFO  [main:Environment@100] - Client environment:java.home&#x3D;&#x2F;usr&#x2F;local&#x2F;jre1.8.0_131</span><br><span class="line">2017-09-28 10:02:24,950 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path&#x3D;&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;build&#x2F;classes:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;build&#x2F;lib&#x2F;*.jar:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;lib&#x2F;slf4j-log4j12-1.6.1.jar:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;lib&#x2F;slf4j-api-1.6.1.jar:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;lib&#x2F;netty-3.10.5.Final.jar:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;lib&#x2F;log4j-1.2.16.jar:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;lib&#x2F;jline-0.9.94.jar:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;zookeeper-3.4.9.jar:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;src&#x2F;java&#x2F;lib&#x2F;*.jar:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;conf:</span><br><span class="line">2017-09-28 10:02:24,950 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path&#x3D;&#x2F;usr&#x2F;java&#x2F;packages&#x2F;lib&#x2F;amd64:&#x2F;usr&#x2F;lib64:&#x2F;lib64:&#x2F;lib:&#x2F;usr&#x2F;lib</span><br><span class="line">2017-09-28 10:02:24,951 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir&#x3D;&#x2F;tmp</span><br><span class="line">2017-09-28 10:02:24,951 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler&#x3D;&lt;NA&gt;</span><br><span class="line">2017-09-28 10:02:24,951 [myid:] - INFO  [main:Environment@100] - Client environment:os.name&#x3D;Linux</span><br><span class="line">2017-09-28 10:02:24,951 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch&#x3D;amd64</span><br><span class="line">2017-09-28 10:02:24,951 [myid:] - INFO  [main:Environment@100] - Client environment:os.version&#x3D;4.4.0-72-generic</span><br><span class="line">2017-09-28 10:02:24,951 [myid:] - INFO  [main:Environment@100] - Client environment:user.name&#x3D;deploy</span><br><span class="line">2017-09-28 10:02:24,951 [myid:] - INFO  [main:Environment@100] - Client environment:user.home&#x3D;&#x2F;home&#x2F;deploy</span><br><span class="line">2017-09-28 10:02:24,951 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir&#x3D;&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin</span><br><span class="line">2017-09-28 10:02:24,952 [myid:] - INFO  [main:ZooKeeper@438] - Initiating client connection, connectString&#x3D;localhost sessionTimeout&#x3D;30000 watcher&#x3D;org.apache.zookeeper.ZooKeeperMain$MyWatcher@531d72ca</span><br><span class="line">Welcome to ZooKeeper!</span><br><span class="line">2017-09-28 10:02:24,967 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1032] - Opening socket connection to server localhost&#x2F;0:0:0:0:0:0:0:1:2181. Will not attempt to authenticate using SASL (unknown error)</span><br><span class="line">JLine support is enabled</span><br><span class="line">2017-09-28 10:02:25,013 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@876] - Socket connection established to localhost&#x2F;0:0:0:0:0:0:0:1:2181, initiating session</span><br><span class="line">[zk: localhost(CONNECTING) 0] 2017-09-28 10:02:25,043 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1299] - Session establishment complete on server localhost&#x2F;0:0:0:0:0:0:0:1:2181, sessionid &#x3D; 0x25ebcbe589d000d, negotiated timeout &#x3D; 30000</span><br><span class="line"></span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected type:None path:null</span><br><span class="line"></span><br><span class="line">[zk: localhost(CONNECTED) 0] ls &#x2F;</span><br><span class="line">[cluster, controller_epoch, controller, brokers, zookeeper, admin, isr_change_notification, consumers, config]</span><br><span class="line">[zk: localhost(CONNECTED) 2] ls &#x2F;brokers&#x2F;ids</span><br><span class="line">[1, 2, 3]</span><br><span class="line">[zk: localhost(CONNECTED) 3] ls &#x2F;brokers&#x2F;topics</span><br><span class="line">[mytopic]</span><br><span class="line">[zk: localhost(CONNECTED) 4] ls &#x2F;brokers&#x2F;topics</span><br><span class="line">[mytopic, second]</span><br><span class="line">[zk: localhost(CONNECTED) 5]</span><br></pre></td></tr></table></figure></li><li><p>kafka 测试</p><ul><li><p>创建主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">deploy@devops0:&#x2F;opt&#x2F;kafka&#x2F;bin$ .&#x2F;kafka-topics.sh --create --zookeeper 192.168.1.207:2181 --replication-factor 2 --partitions 1 --topic second</span><br><span class="line"></span><br><span class="line">Created topic &quot;second&quot;.</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 查看zookeeper中kafka的内容</span><br><span class="line">deploy@devops0:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin$ .&#x2F;zkCli.sh  -server localhost</span><br><span class="line">Connecting to localhost</span><br><span class="line">2017-09-28 10:11:32,907 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version&#x3D;3.4.9-1757313, built on 08&#x2F;23&#x2F;2016 06:50 GMT</span><br><span class="line">2017-09-28 10:11:32,909 [myid:] - INFO  [main:Environment@100] - Client environment:host.name&#x3D;devops0</span><br><span class="line">2017-09-28 10:11:32,909 [myid:] - INFO  [main:Environment@100] - Client environment:java.version&#x3D;1.8.0_131</span><br><span class="line">2017-09-28 10:11:32,911 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor&#x3D;Oracle Corporation</span><br><span class="line">2017-09-28 10:11:32,911 [myid:] - INFO  [main:Environment@100] - Client environment:java.home&#x3D;&#x2F;usr&#x2F;local&#x2F;jre1.8.0_131</span><br><span class="line">2017-09-28 10:11:32,911 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path&#x3D;&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;build&#x2F;classes:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;build&#x2F;lib&#x2F;*.jar:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;lib&#x2F;slf4j-log4j12-1.6.1.jar:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;lib&#x2F;slf4j-api-1.6.1.jar:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;lib&#x2F;netty-3.10.5.Final.jar:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;lib&#x2F;log4j-1.2.16.jar:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;lib&#x2F;jline-0.9.94.jar:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;zookeeper-3.4.9.jar:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;src&#x2F;java&#x2F;lib&#x2F;*.jar:&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin&#x2F;..&#x2F;conf:</span><br><span class="line">2017-09-28 10:11:32,911 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path&#x3D;&#x2F;usr&#x2F;java&#x2F;packages&#x2F;lib&#x2F;amd64:&#x2F;usr&#x2F;lib64:&#x2F;lib64:&#x2F;lib:&#x2F;usr&#x2F;lib</span><br><span class="line">2017-09-28 10:11:32,911 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir&#x3D;&#x2F;tmp</span><br><span class="line">2017-09-28 10:11:32,911 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler&#x3D;&lt;NA&gt;</span><br><span class="line">2017-09-28 10:11:32,911 [myid:] - INFO  [main:Environment@100] - Client environment:os.name&#x3D;Linux</span><br><span class="line">2017-09-28 10:11:32,911 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch&#x3D;amd64</span><br><span class="line">2017-09-28 10:11:32,911 [myid:] - INFO  [main:Environment@100] - Client environment:os.version&#x3D;4.4.0-72-generic</span><br><span class="line">2017-09-28 10:11:32,911 [myid:] - INFO  [main:Environment@100] - Client environment:user.name&#x3D;deploy</span><br><span class="line">2017-09-28 10:11:32,912 [myid:] - INFO  [main:Environment@100] - Client environment:user.home&#x3D;&#x2F;home&#x2F;deploy</span><br><span class="line">2017-09-28 10:11:32,912 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir&#x3D;&#x2F;opt&#x2F;zookeeper-3.4.9&#x2F;bin</span><br><span class="line">2017-09-28 10:11:32,912 [myid:] - INFO  [main:ZooKeeper@438] - Initiating client connection, connectString&#x3D;localhost sessionTimeout&#x3D;30000 watcher&#x3D;org.apache.zookeeper.ZooKeeperMain$MyWatcher@446cdf90</span><br><span class="line">Welcome to ZooKeeper!</span><br><span class="line">2017-09-28 10:11:32,927 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1032] - Opening socket connection to server localhost&#x2F;0:0:0:0:0:0:0:1:2181. Will not attempt to authenticate using SASL (unknown error)</span><br><span class="line">JLine support is enabled</span><br><span class="line">2017-09-28 10:11:32,967 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@876] - Socket connection established to localhost&#x2F;0:0:0:0:0:0:0:1:2181, initiating session</span><br><span class="line">[zk: localhost(CONNECTING) 0] 2017-09-28 10:11:33,007 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1299] - Session establishment complete on server localhost&#x2F;0:0:0:0:0:0:0:1:2181, sessionid &#x3D; 0x15ebcbe5acc0029, negotiated timeout &#x3D; 30000</span><br><span class="line"></span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected type:None path:null</span><br><span class="line"></span><br><span class="line">[zk: localhost(CONNECTED) 0] ls &#x2F;</span><br><span class="line">[cluster, controller_epoch, controller, brokers, zookeeper, admin, isr_change_notification, consumers, config]</span><br><span class="line">[zk: localhost(CONNECTED) 1] ls &#x2F;brokers</span><br><span class="line">[ids, topics, seqid]</span><br><span class="line">[zk: localhost(CONNECTED) 2] ls &#x2F;brokers&#x2F;ids</span><br><span class="line">[1, 2, 3]</span><br><span class="line">[zk: localhost(CONNECTED) 3] ls &#x2F;brokers&#x2F;topics</span><br><span class="line">[mytopic, second]</span><br></pre></td></tr></table></figure></li><li><p>创建生产者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy@manashare:&#x2F;opt&#x2F;kafka&#x2F;bin$ .&#x2F;kafka-console-producer.sh --broker-list 192.168.1.208:9092 --topic mytopic</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 以下为命令行输入内容，每次换行将消息发到主题中</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">this is a test</span><br></pre></td></tr></table></figure></li><li><p>创建消费者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy@devops0:&#x2F;opt&#x2F;kafka&#x2F;bin$ .&#x2F;kafka-console-consumer.sh --zookeeper localhost:2181 --topic mytopic</span><br><span class="line">Using the ConsoleConsumer with old consumer is deprecated and will be removed in a future major release. Consider using the new consumer by passing [bootstrap-server] instead of [zookeeper].</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 以下内容是从主题中接收到消息</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">this is a test</span><br></pre></td></tr></table></figure></li><li><p>查看主题列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy@devops0:&#x2F;opt&#x2F;kafka&#x2F;bin$ .&#x2F;kafka-topics.sh --list --zookeeper localhost:2181</span><br><span class="line">&#x2F;&#x2F; 以下为主题列表</span><br><span class="line">mytopic</span><br><span class="line">second</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><h4 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h4><ul><li><p>zoo.cfg 注意事项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tickTime&#x3D;2000</span><br><span class="line">dataDir&#x3D;&#x2F;var&#x2F;lib&#x2F;zookeeper</span><br><span class="line">dataLogDir&#x3D;&#x2F;var&#x2F;log&#x2F;zookeeper</span><br><span class="line">&#x2F;&#x2F; 客户端访问端口</span><br><span class="line">clientPort&#x3D;2181</span><br><span class="line">initLimit&#x3D;10</span><br><span class="line">syncLimit&#x3D;5</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Server配置中主要部分要使用IP，而不是主机名形式</span><br><span class="line">server.1&#x3D;192.168.1.208:2888:3888</span><br><span class="line">server.2&#x3D;192.168.1.209:2888:3888</span><br><span class="line">server.3&#x3D;192.168.1.207:2888:3888</span><br></pre></td></tr></table></figure></li><li><p>kafka 的 server.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 在这里定义对外的主机名</span><br><span class="line">advertised.host.name&#x3D;devops2</span><br><span class="line"># The address the socket server listens on. It will get the value returned from</span><br><span class="line"># java.net.InetAddress.getCanonicalHostName() if not configured.</span><br><span class="line">#   FORMAT:</span><br><span class="line">#     listeners &#x3D; security_protocol:&#x2F;&#x2F;host_name:port</span><br><span class="line">#   EXAMPLE:</span><br><span class="line">#     listeners &#x3D; PLAINTEXT:&#x2F;&#x2F;your.host.name:9092</span><br><span class="line">&#x2F;&#x2F; 这里使用IP形式，不要使用主机名</span><br><span class="line">listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;192.168.1.209:9092</span><br></pre></td></tr></table></figure></li><li><p>ansible-galaxy role 的安装路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 我是使用Homebrew安装的ansible，ansbile-galaxy安装的Role放在‘&#x2F;usr&#x2F;local&#x2F;etc&#x2F;ansible&#x2F;roles’目录下</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;etc&#x2F;ansible&#x2F;roles ls -l</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  14 jiaxi  admin  476 Sep 22 14:55 AnsibleShipyard.ansible-zookeeper</span><br><span class="line">drwxr-xr-x  15 jiaxi  admin  510 Sep 25 16:40 idealista.kafka-role</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><ul><li><a href="https://www.hyperledger.org/projects/fabric" target="_blank" rel="noopener">Hyperledger fabric</a>官方主页</li><li><a href="https://kafka.apache.org/" target="_blank" rel="noopener">Apache Kafka</a>网站</li><li><a href="http://docs.ansible.com/" target="_blank" rel="noopener">Ansible</a>官方文档</li><li><a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">Apache Zookeeper</a>主页</li><li><a href="https://galaxy.ansible.com/" target="_blank" rel="noopener">Ansible galaxy</a>网站</li><li><a href="https://galaxy.ansible.com/AnsibleShipyard/ansible-zookeeper/" target="_blank" rel="noopener">AnsibleShipyard ansible-zookeeper role</a></li><li><a href="https://galaxy.ansible.com/idealista/kafka-role/" target="_blank" rel="noopener">Idealista kafka-role</a></li><li><a href="http://www.cnblogs.com/luotianshuai/p/5206662.html" target="_blank" rel="noopener">Mr.心弦 Kafka 集群搭建</a></li></ul></li><li><h4 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h4><p>整个过程还是算顺利，以前没有接触过 Zookeeper 和 Kafka，花了 2 天时间把这个集群搭起来，主要的时候还是花在寻找合适的 ansible Role，还好 Ubuntu 用得比较熟，Ansile 的代码不算难懂，下载的 Role 有时候需要做一些小的改动。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;h4 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h4&gt;&lt;p&gt;因为&lt;a href=&quot;https://www.hyperledger.org/projects/fabric&quot; targe
      
    
    </summary>
    
    
      <category term="blockchain" scheme="http://marryton007.github.io/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="http://marryton007.github.io/tags/blockchain/"/>
    
      <category term="hyperledger" scheme="http://marryton007.github.io/tags/hyperledger/"/>
    
      <category term="composer" scheme="http://marryton007.github.io/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>hyperledger composer 实战</title>
    <link href="http://marryton007.github.io/2017/09/04/blockchain/hyperledger-composer-learn/"/>
    <id>http://marryton007.github.io/2017/09/04/blockchain/hyperledger-composer-learn/</id>
    <published>2017-09-04T06:17:39.000Z</published>
    <updated>2022-05-21T02:53:38.016Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p><a href="https://hyperledger.github.io/composer/index.html" target="_blank" rel="noopener">hyperledger composer</a>是 hyperledger 组织下的新星项目，封装了<a href="https://github.com/hyperledger/fabric-sdk-node" target="_blank" rel="noopener">Node SDK</a>与区块链交互的复杂细节，对使用者提供了一套简洁直观的语法来定义业务模型，可以让区块链开发人员快速上手，缩短开发时间，是一套非常好的工具。</p></li><li><h3 id="业务模型概念讲解"><a href="#业务模型概念讲解" class="headerlink" title="业务模型概念讲解  "></a>业务模型概念讲解  </h3><p><img src="https://hyperledger.github.io/composer/assets/img/BusinessNetworkFiles.svg" alt="Business Networking">   定义业务模型的过程在<a href="https://hyperledger.github.io/composer/index.html" target="_blank" rel="noopener">composer</a>中称之为定义’Business Network’, 业务模型有以下几个关键要素：</p><ul><li>Asset, 资产，可用于交易的价值物，比如房产买卖中的房子</li><li>Participant, 参与者，参与交易的人，比如房产买卖中房主、购房者、中介</li><li>Transaction, 交易，由某一参与者发起，对资产状态带来改变的操作，如房主挂牌销售、购房者出价，成交等</li><li>ACL, 权限控制, 限制参与者能够发起的交易(操作)</li></ul><p>同样，在上图可以看到，在<a href="https://hyperledger.github.io/composer/index.html" target="_blank" rel="noopener">composer</a>定义一个业务模型需要下面 3 类文件：</p><ul><li>Model files， 模型文件，其中包含资产、参与者的定义，以及交易需要的参数</li><li>Javascript Files， 定义交易的具体实现逻辑</li><li>Access Control File， 定义 ACL 规则</li></ul><p>最终，将业务模型的所有文件打包成以.bna 结尾’Business Network’文件</p></li><li><h3 id="安装"><a href="#安装" class="headerlink" title="安装  "></a>安装  </h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g composer-cli generator-hyperledger-composer composer-rest-server yo</span><br></pre></td></tr></table></figure><ul><li>composer-cli 包含了开发’Business Network’的命令行工具，如打包，部署等</li><li>generator-hyperledger-composer Yo 脚手架插件，专用于快速生成’Business Newtork’</li><li>yo 脚手架开发框架</li><li>composer-rest-server 基于<a href="https://loopback.io/" target="_blank" rel="noopener">loopback</a>的 API 生成工具，可以快速将’Business Network’转换成可以访问的 API，大大减少了开发时间</li></ul></li><li><h3 id="Composer-实战"><a href="#Composer-实战" class="headerlink" title="Composer 实战"></a>Composer 实战</h3><ul><li><p>清理 Docker 容器，获得干净的测试环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> $(docker ps -q)</span><br><span class="line">docker rm $(docker ps -aq)</span><br><span class="line">docker rmi $(docker images dev-* -q)</span><br></pre></td></tr></table></figure></li><li><p>启动 Fabric 网络</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/work/fabric-tools &amp;&amp; <span class="built_in">cd</span> ~/work/fabric-tools</span><br><span class="line">curl -O https://raw.githubusercontent.com/hyperledger/composer-tools/master/packages/fabric-dev-servers/fabric-dev-servers.tar.gz</span><br><span class="line">tar xvzf fabric-dev-servers.tar.gz</span><br><span class="line"></span><br><span class="line">./downloadFabric.sh        //下载fabric相关docker镜像</span><br><span class="line">./startFabric.sh           //使用Docker-compose启动Fabric网络</span><br><span class="line">./createComposerProfile.sh //创建连接文件</span><br></pre></td></tr></table></figure><p>在 createComposerProfile.sh 脚本中， 将会生成~/.composer-connection-profiles/hlfv1/connection.json 连接文件，这个文件明确了 composer 如何连接 Fabric 区块链网络，如果你对 Fabric 网络比较熟悉的话，也可以不用执行前 2 个脚本，直接生成连接文件，然后按实际情况修正即可。注意：composer 推荐使用 Fabric1.0 网络。</p></li><li><p>停止 Fabric 网络</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/work/fabric-tools</span><br><span class="line">./stopFabric.sh</span><br><span class="line">./teardownFabric.sh</span><br></pre></td></tr></table></figure></li><li><p>克隆 composer 例子代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/work</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/hyperledger/composer-sample-networks.git</span><br><span class="line">cp -r ./composer-sample-networks/packages/basic-sample-network/  ./my-network</span><br></pre></td></tr></table></figure><p>使用编辑器(官方推荐<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VSCode</a>)打开 my-network 目录, 从目录结构中可以看到几个重要的目录和文件</p><ul><li>permissions.acl ACL 定义文件</li><li>models 目录，用于存储 Model Files(.cto)，每个.cto 使用独立的命名空间</li><li>lib 目录，用于存储 Javascript Files</li></ul></li><li><p>修改 my-network 项目</p><ul><li><p>修改 package.json 文件</p><ul><li>修改 name 为’my-network’</li><li>修改 description 为’My Commodity Trading network’</li><li>修改 prepublish 脚本中修改生成的 Business network 打包名为’my-network.bna’</li></ul></li><li><p>使用如下内容替换 models/sample.cto</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * My commodity trading network</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">namespace org.acme.mynetwork</span><br><span class="line">asset Commodity identified by tradingSymbol &#123;</span><br><span class="line">    o <span class="built_in">String</span> tradingSymbol</span><br><span class="line">    o <span class="built_in">String</span> description</span><br><span class="line">    o <span class="built_in">String</span> mainExchange</span><br><span class="line">    o Double quantity</span><br><span class="line">    --&gt; Trader owner</span><br><span class="line">&#125;</span><br><span class="line">participant Trader identified by tradeId &#123;</span><br><span class="line">    o <span class="built_in">String</span> tradeId</span><br><span class="line">    o <span class="built_in">String</span> firstName</span><br><span class="line">    o <span class="built_in">String</span> lastName</span><br><span class="line">&#125;</span><br><span class="line">transaction Trade &#123;</span><br><span class="line">    --&gt; Commodity commodity</span><br><span class="line">    --&gt; Trader newOwner</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 sample.cto 文件中，定义了 Asset(货物)、Participant(商人)和 Transaction(贸易)，在贸易当中，货物会被易主</p></li><li><p>使用如下内容替换 lib/sample.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Track the trade of a commodity from one trader to another</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;org.acme.mynetwork.Trade&#125;</span> <span class="variable">trade</span></span> - the trade to be processed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@transaction</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tradeCommodity</span>(<span class="params">trade</span>) </span>&#123;</span><br><span class="line">  trade.commodity.owner = trade.newOwner;</span><br><span class="line">  <span class="keyword">return</span> getAssetRegistry(<span class="string">"org.acme.mynetwork.Commodity"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    assetRegistry</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> assetRegistry.update(trade.commodity);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个 js 文件中的一个函数被@trasnaction 注释，则注释中@param 指定的交易类型(本例中为<strong>‘org.acme.mynetwork.Trade’</strong>)被提交时，该函数会被自动执行。sample.js 文件完成了’货物易主’的逻辑:在一个 Trade(贸易)操作中，货物的属主被更新为 trade.newOwner，且被永久地更新到区块链上。</p></li><li><p>修改权限控制文件 permissions.acl 为如下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Access control rules for mynetwork</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">rule Default &#123;</span><br><span class="line">    description: <span class="string">"Allow all participants access to all resources"</span></span><br><span class="line">    participant: <span class="string">"ANY"</span></span><br><span class="line">    operation: ALL</span><br><span class="line">    resource: <span class="string">"org.acme.mynetwork.*"</span></span><br><span class="line">    action: ALLOW</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule SystemACL &#123;</span><br><span class="line">  description:  <span class="string">"System ACL to permit all access"</span></span><br><span class="line">  participant: <span class="string">"org.hyperledger.composer.system.Participant"</span></span><br><span class="line">  operation: ALL</span><br><span class="line">  resource: <span class="string">"org.hyperledger.composer.system.**"</span></span><br><span class="line">  action: ALLOW</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><ul><li><p>生成 Business Network Archive</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/work/my-network</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>你将看到如下输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdirp ./dist &amp;&amp; composer archive create --sourceType dir --sourceName . -a ./dist/my-network.bna</span><br><span class="line"></span><br><span class="line">  Creating Business Network Archive</span><br></pre></td></tr></table></figure></li></ul><pre><code>Looking for package.json of Business Network Definition    Input directory: /Users/jiaxi/work/fabric-composer/my-networkFound:    Description: My Commodity Trading network    Name: my-network    Identifier: my-network@0.1.8Written Business Network Definition Archive file to    Output file: ./dist/my-network.bnaCommand succeededDone in 158.57s.</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在.&#x2F;dist&#x2F;目录下会生成一个.bna 文件，这个文件就 Business Network Archive 文件，这个文件将会被部署到 fabric 区块链上。</span><br><span class="line"></span><br><span class="line">- 部署 Business Network Archive 文件</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;sh</span><br><span class="line">  cd dist</span><br><span class="line">  composer network deploy -a my-network.bna -p hlfv1 -i PeerAdmin -s randomString</span><br><span class="line">  &#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">  部署过程差不多会花费 30 秒左右，如果一切正常，你将会看到如下结果：</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;sh</span><br><span class="line">   Deploying business network from archive: my-network.bna</span><br><span class="line">   Business network definition:</span><br><span class="line">   Identifier: my-network@0.1.8</span><br><span class="line">   Description: My Commodity Trading network</span><br><span class="line"></span><br><span class="line">   ✔ Deploying business network definition. This may take a minute...</span><br><span class="line"></span><br><span class="line">   Command succeeded</span><br><span class="line">  &#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">  你可以通过以下指令到验证部署是否成功</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;sh</span><br><span class="line">  composer network ping -n my-network -p hlfv1 -i PeerAdmin -s adminpw</span><br><span class="line">  &#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">  如果结果如下，表明部署成功</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;sh</span><br><span class="line">  The connection to the network was successfully tested: my-network</span><br><span class="line">       version: 0.12.0</span><br><span class="line">       participant: &lt;no participant found&gt;</span><br><span class="line"></span><br><span class="line">   Command succeeded</span><br><span class="line">  &#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">- 生成 REST API</span><br><span class="line">到现在为止，你已经完成了 Business Network 的开发，你已经编写了业务模型文件.cto，还完成了业务逻辑的.js 的工作，权限控制文件.acl，并打包成了.bna 文件，部署到了 Fabric 区块链网络中。那么，接下来做什么？是时候将你的 Business Network 与其他系统集成在一起了。幸好，Hyperledger composer 提供了 composer-rest-server 组件，该组件将根据你定义的 Business Network，自动生成一系列的 REST API，以供外部系统访问。具体操作如下：</span><br><span class="line"></span><br><span class="line">    &#96;&#96;&#96;sh</span><br><span class="line">    cd ..</span><br><span class="line">    composer-rest-server</span><br><span class="line">    &#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">    你需要回答一系列问题，composer-rest-server会自动生成一系统的REST API，下面的内容中，以*？* 开头的行是问题。</span><br><span class="line"></span><br><span class="line">    &#96;&#96;&#96;sh</span><br><span class="line">    ? Enter your Fabric Connection Profile Name: hlfv1</span><br><span class="line">    ? Enter your Business Network Identifier : my-network</span><br><span class="line">    ? Enter your Fabric username : PeerAdmin</span><br><span class="line">    ? Enter your secret: adminpw</span><br><span class="line">    ? Specify if you want namespaces in the generated REST API: never use namespaces</span><br><span class="line">    ? Specify if you want to enable authentication for the REST API using Passport: No</span><br><span class="line">    ? Specify if you want to enable event publication over WebSockets: Yes</span><br><span class="line">    ? Specify if you want to enable TLS security for the REST API: No</span><br><span class="line"></span><br><span class="line">    To restart the REST server using the same options, issue the following command:</span><br><span class="line">       composer-rest-server -p hlfv1 -n my-network -i PeerAdmin -s adminpw -N never -w true</span><br><span class="line"></span><br><span class="line">    Discovering types from business network definition ...</span><br><span class="line">    Discovered types from business network definition</span><br><span class="line">    Generating schemas for all types in business network definition ...</span><br><span class="line">    Generated schemas for all types in business network definition</span><br><span class="line">    Adding schemas for all types to Loopback ...</span><br><span class="line">    Added schemas for all types to Loopback</span><br><span class="line">    Web server listening at: http:&#x2F;&#x2F;localhost:3000</span><br><span class="line">    Browse your REST API at http:&#x2F;&#x2F;localhost:3000&#x2F;explorer</span><br><span class="line">    &#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">    请特别注意上面内容中的最后2行。</span><br><span class="line"></span><br><span class="line">    &#96;&#96;&#96;sh</span><br><span class="line">    &#x2F;&#x2F; REST API 服务网址</span><br><span class="line">    http:&#x2F;&#x2F;localhost:3000</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; REST API 服务列表，详述了每个API的功能，参数列表等，并且可以在线测试，可做API文档使用</span><br><span class="line">    http:&#x2F;&#x2F;localhost:3000&#x2F;explorer</span><br><span class="line">    &#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">    生成的REST API中，你可以创建、获取、更新、删除Asset和Participant，还可以发起一笔Transaction，还有一些查询系统所有交易，或是根据ID查询交易之类的系统函数。</span><br><span class="line"></span><br><span class="line">* 生成 WEB 应用程序骨架</span><br><span class="line">除了可用 composer-rest-server 来对 Business Network 来进行访问以外，还可以使用 generator-hyperledger-composer 来生成 WEB 应用程序骨架，骨架程序之中，已经包含对 Business Network 的访问代码，可以让 WEB 开发人员不必关心 Business Network 的实现细节，只要调用暴露出来的 REST API 即可。使用如下命令来生成骨架</span><br><span class="line">&#96;&#96;&#96;sh</span><br><span class="line">yo hyperledger-composer</span><br></pre></td></tr></table></figure><p>同样要回答一系列问题</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">Welcome to the Hyperledger Composer project generator</span><br><span class="line">? Please select the <span class="built_in">type</span> of project: Angular</span><br><span class="line">You can run this generator using: <span class="string">'yo hyperledger-composer:angular'</span></span><br><span class="line">Welcome to the Hyperledger Composer Angular project generator</span><br><span class="line">? Do you want to connect to a running Business Network? Yes</span><br><span class="line">? Project name: my-app</span><br><span class="line">? Description: Commodities Trading App</span><br><span class="line">? Author name: liujiaxi</span><br><span class="line">? Author email: liujiaxi@mana.com</span><br><span class="line">? License: Apache-2.0</span><br><span class="line">? Business network identifier: my-network</span><br><span class="line">? Connection profile: hlfv1</span><br><span class="line">? Enrollment ID: PeerAdmin</span><br><span class="line">? Enrollment secret: adminpw</span><br><span class="line">? Do you want to generate a new REST API or connect to an existing REST API?  Generate a new REST API</span><br><span class="line">? REST server port: 3000</span><br><span class="line">? Should namespaces be used <span class="keyword">in</span> the generated REST API? Never use namespaces</span><br><span class="line">Created application!</span><br><span class="line">Completed generation process</span><br><span class="line">   create e2e/app.e2e-spec.ts</span><br><span class="line">   create e2e/app.po.ts</span><br><span class="line">   create e2e/tsconfig.e2e.json</span><br><span class="line">   create e2e/tsconfig.json</span><br><span class="line">   create karma.conf.js</span><br><span class="line">   create package.json</span><br><span class="line">   create protractor.conf.js</span><br><span class="line">   create README.md</span><br><span class="line">   create src/app/app-routing.module.ts</span><br><span class="line">   create src/app/app.component.css</span><br><span class="line">   create src/app/app.component.html</span><br><span class="line">   create src/app/app.component.spec.ts</span><br><span class="line">   create src/app/app.component.ts</span><br><span class="line">   create src/app/app.module.ts</span><br><span class="line">   create src/app/configuration.ts</span><br><span class="line">   create src/app/data.service.ts</span><br><span class="line">   create src/app/home/home.component.html</span><br><span class="line">   create src/app/home/home.component.ts</span><br><span class="line">   create src/environments/environment.prod.ts</span><br><span class="line">   create src/environments/environment.ts</span><br><span class="line">   create src/favicon.ico</span><br><span class="line">   create src/index.html</span><br><span class="line">   create src/main.ts</span><br><span class="line">   create src/polyfills.ts</span><br><span class="line">   create src/styles.css</span><br><span class="line">   create src/test.ts</span><br><span class="line">   create src/tsconfig.app.json</span><br><span class="line">   create src/tsconfig.json</span><br><span class="line">   create src/tsconfig.spec.json</span><br><span class="line">   create tsconfig.json</span><br><span class="line">   create tslint.json</span><br><span class="line">   create .angular-cli.json</span><br><span class="line">   create .editorconfig</span><br><span class="line">   create .gitignore</span><br><span class="line">   create src/app/Commodity/Commodity.component.ts</span><br><span class="line">   create src/app/Commodity/Commodity.service.ts</span><br><span class="line">   create src/app/Commodity/Commodity.component.spec.ts</span><br><span class="line">   create src/app/Commodity/Commodity.component.html</span><br><span class="line">   create src/app/Commodity/Commodity.component.css</span><br></pre></td></tr></table></figure><p>进入项目目录，运行应用程序</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-app  //根据骨架自动生成</span><br><span class="line">npm start  //启动应用程序</span><br></pre></td></tr></table></figure><p>根据 README.md 和 pacakge.json 文件可以看出，该项目使用<a href="https://github.com/angular/angular-cli" target="_blank" rel="noopener">angular-cli</a>和 composer-rest-server，其中 composer-rest-server 提供访问 Business Network 的 API，angular-cli 提供 WEB 访问界面。以下内容出自 package.json 文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">"name": "my-app",</span><br><span class="line">"description": "Commodities Trading App",</span><br><span class="line">"version": "0.0.1",</span><br><span class="line">"author": "liujiaxi",</span><br><span class="line">"email": "liujiaxi@mana.com",</span><br><span class="line">"license": "Apache-2.0",</span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "app": "composer-rest-server -n my-network -p hlfv1 -i PeerAdmin -s adminpw -N never -P 3000",</span><br><span class="line">  "start": "concurrently \"ng serve --host 0.0.0.0\" \"npm run app\""</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果启动过程中没有出现错误信息，则访问<a href="http://0.0.0.0:4200/即可进入WEB应用界面。" target="_blank" rel="noopener">http://0.0.0.0:4200/即可进入WEB应用界面。</a></p><ol start="4"><li><h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><ol><li>建议使用 npm 来安装相关的模块。笔者一开始是使用 yarn 来全局安装模块，结果后面某些步骤就无法进行下去了，这里还没有弄明白原因，但考虑为了节约读者的时间，还是先用 npm 吧。</li><li>docker 镜像最好使用 1.0.0 版。笔者在尝试部署 Business Network 的时候总是失败，最后试下来发现用的 docker 镜像是 1.0.1 版(最新版)，无奈之下，只好使用<a href="https://github.com/hyperledger/fabric-samples" target="_blank" rel="noopener">fabric-samples</a>中的 fabcar 来启动 fabric 区块链网络。</li><li>读者已经发现笔者总是使用 PeerAdmin 这个用户名来访问区块链，这是怎么做到的呢，请读者参考<a href="https://hyperledger.github.io/composer/reference/composer.identity.import.html" target="_blank" rel="noopener">Composer Identity Import</a></li></ol></li><li><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本是只是笔者个人对于 hyperledger composer 工具集一些个人理解，并整合官方的<a href="https://hyperledger.github.io/composer/tutorials/developer-guide.html" target="_blank" rel="noopener">hyperledger composer 开发者指南</a>,这里笔者仅描述了使用 hyperledger composer 的开发基于 Fabric 区块链应用的一个大概流程，还有很多具体的细节没有涉及，希望读者能通过阅读官方文档的方式来进一步学习。</p></li><li><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://hyperledger.github.io/composer/index.html" target="_blank" rel="noopener">hyperledger composer</a><br><a href="https://yarnpkg.com/zh-Hans/" target="_blank" rel="noopener">Node 模块包依赖管理工具——Yarn</a><br><a href="https://loopback.io/" target="_blank" rel="noopener">loopback: rest API server</a><br><a href="http://yeoman.io/" target="_blank" rel="noopener">yeoman</a><br><a href="https://github.com/angular/angular-cli" target="_blank" rel="noopener">angular-cli</a><br><a href="https://hyperledger.github.io/composer/tutorials/developer-guide.html" target="_blank" rel="noopener">hyperledger composer 开发者指南</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;h3 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://hyperledger.github.io/composer/index
      
    
    </summary>
    
    
      <category term="blockchain" scheme="http://marryton007.github.io/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="http://marryton007.github.io/tags/blockchain/"/>
    
      <category term="hyperledger" scheme="http://marryton007.github.io/tags/hyperledger/"/>
    
      <category term="composer" scheme="http://marryton007.github.io/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>hyperledger fabric交易流程</title>
    <link href="http://marryton007.github.io/2017/08/24/blockchain/fabric-transaction-flow/"/>
    <id>http://marryton007.github.io/2017/08/24/blockchain/fabric-transaction-flow/</id>
    <published>2017-08-24T06:17:39.000Z</published>
    <updated>2022-05-21T02:53:38.016Z</updated>
    
    <content type="html"><![CDATA[<p>在这篇文章中，我将阐述在 fabric 网络中资产交易时的底层机制。在这个场景中，有 2 个客户，A 和 B，他们想要在区块链网络中买卖萝卜，他们每人都拥有 1 个节点来发送交易或是与区块链进行交互。<br><img src="http://hyperledger-fabric.readthedocs.io/en/latest/_images/step0.png" alt="step0"></p><ol><li><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>在开始之前，我们作如下假设：</p><ul><li>区块链通道已经建立并已经运行</li><li>用户已经在链上注册并通过 CA 认证</li><li>智能合约已经安装到节点上并且已经完成初始化，该智能合约包括一些有关萝卜交易市场的初始状态，一系统关于萝卜的交易指令和萝卜成交价格的定义等。</li><li>交易的背书策略已经定义好，这里要求所有的交易必须经过 A 和 B 的共同背书</li></ul><p><img src="http://hyperledger-fabric.readthedocs.io/en/latest/_images/step1.png" alt="step1"></p></li><li><h3 id="客户-A-发起交易请求"><a href="#客户-A-发起交易请求" class="headerlink" title="客户 A 发起交易请求"></a>客户 A 发起交易请求</h3><p>发生了什么事？客户 A 发起一个购买萝卜请求，这个请求会到达到节点 A 和节点 B，这 2 个节点分别属于客户 A 和客户 B，背书策略要求 2 个节点一起完成每笔交易的背书，所以这个请求先送到节点 A 和节点 B。</p><p>更进一步，一个’交易预案’将被构造出来，如上图，客户 A 通过 SDK(Node 版、Java 版、Python 版)来构造这个’交易预案’，这个预案通过调用智能合约中的函数对账本进行读写。SDK 在这个过程中充当一个’垫片’的角色，它将预案以合适的格式打包并使用用户的加密证书给预案签名。</p><p><img src="http://hyperledger-fabric.readthedocs.io/en/latest/_images/step2.png" alt="step2"></p></li><li><h3 id="背书节点验证"><a href="#背书节点验证" class="headerlink" title="背书节点验证"></a>背书节点验证</h3><p>背书节点收到’交易预案’后，需要作如下验证工作：</p><ul><li>交易预案是完好的</li><li>该预案以前没有提交过(防止<a href="https://zh.wikipedia.org/wiki/%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB" target="_blank" rel="noopener">重放攻击</a>)</li><li>签名是合法的</li><li>交易发起者(客户 A)是否满足区块链写策略</li></ul><p>满足以上要求后，背书节点把’交易预案’作为输入参数，调用智能合约中的函数，智能合约根据当前的账本状态计算出一个’交易结果’,该结果包括返回值，读写集。此时，区块链账本并不会被更新。’交易结果’在被签名后与一个是/否的背书结果一同返回，称之为’预案回复’。</p><p>{MSP 是一个节点组件允许验证从客户商过来的交易请求，且对’交易结果’进行签名。区块链的写策略是在通过建立时定义的，它决定谁有资格向通道发起交易请求}</p><p><img src="http://hyperledger-fabric.readthedocs.io/en/latest/_images/step3.png" alt="step3"></p></li><li><h3 id="剖析预案回复"><a href="#剖析预案回复" class="headerlink" title="剖析预案回复"></a>剖析预案回复</h3><p>SDK 通过验证背书节点的签名且比较’预案回复’来作决定：</p><ul><li>‘预案回复’是否一致</li><li>背书策略是否满足</li></ul><p><img src="http://hyperledger-fabric.readthedocs.io/en/latest/_images/step4.png" alt="step4"></p></li><li><h3 id="集合背书成交易"><a href="#集合背书成交易" class="headerlink" title="集合背书成交易"></a>集合背书成交易</h3><p>SDK 将’交易预案’和’预案回复’组合成’交易消息’，并将其广播到排序服务，’交易消息’包含读写集，背书节点签名和智能合约 ID。排序服务并不关心’交易内容’，它只是简单的接收所有网络上所有通道的’交易消息’，分通道对’交易消息’按时间排序，并按通道将交易打包成块。<br><img src="http://hyperledger-fabric.readthedocs.io/en/latest/_images/step5.png" alt="step5"></p></li><li><p>###　交易验证<br>块会被运送到通道中的所有节点，块中的交易会被验证是否满足背书策略，且要确保交易的中的读集合在交易执行以来账本没做修改，块中的交易都会被上有效/无效的标签。<br><img src="http://hyperledger-fabric.readthedocs.io/en/latest/_images/step6.png" alt="step6"></p></li><li><h3 id="账本更新"><a href="#账本更新" class="headerlink" title="账本更新"></a>账本更新</h3><p>通道中每个节点将块追加到自身账本后，并且确认交易中的写集合被提交自身的状态数据库中。在这之后，一个事件会被触发，以通知 SDK 交易已被永久地追加到账本上。</p></li><li><h3 id="资料参考"><a href="#资料参考" class="headerlink" title="资料参考"></a>资料参考</h3><ul><li><a href="http://hyperledger-fabric.readthedocs.io/en/latest/txflow.html" target="_blank" rel="noopener">官方参考</a></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在这篇文章中，我将阐述在 fabric 网络中资产交易时的底层机制。在这个场景中，有 2 个客户，A 和 B，他们想要在区块链网络中买卖萝卜，他们每人都拥有 1 个节点来发送交易或是与区块链进行交互。&lt;br&gt;&lt;img src=&quot;http://hyperledger-fabr
      
    
    </summary>
    
    
      <category term="blockchain" scheme="http://marryton007.github.io/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="http://marryton007.github.io/tags/blockchain/"/>
    
  </entry>
  
  <entry>
    <title>基于hyperledger fabric网络的第一个应用</title>
    <link href="http://marryton007.github.io/2017/08/23/blockchain/first-fabric-application/"/>
    <id>http://marryton007.github.io/2017/08/23/blockchain/first-fabric-application/</id>
    <published>2017-08-23T06:17:39.000Z</published>
    <updated>2022-05-21T02:53:38.016Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>本文基本 hyperledger fabric 区块链网络，编写一个简单的应用，旨在讲述以下几点：</p><ul><li>如何启动一个 hyperledger fabric 区块链网络</li><li>如何编写一个简单的智能合约</li><li>如何将区块链应用与现有系统整合</li></ul></li><li><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/hyperledger/fabric-samples.git</span><br><span class="line"><span class="built_in">cd</span> fabric-samples/fabcar</span><br></pre></td></tr></table></figure></li><li><h3 id="启动区块链网络"><a href="#启动区块链网络" class="headerlink" title="启动区块链网络"></a>启动区块链网络</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startFabric.sh</span><br></pre></td></tr></table></figure><p>来看一下上面的 startFabric.sh 这个脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Copyright IBM Corp All Rights Reserved</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Exit on first error</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># don't rewrite paths for Windows Git Bash users</span></span><br><span class="line"><span class="built_in">export</span> MSYS_NO_PATHCONV=1</span><br><span class="line"></span><br><span class="line">starttime=$(date +%s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d ~/.hfc-key-store/ ]; <span class="keyword">then</span></span><br><span class="line">mkdir ~/.hfc-key-store/</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">cp <span class="variable">$PWD</span>/creds/* ~/.hfc-key-store/</span><br><span class="line"><span class="comment"># launch network; create channel and join peer to channel</span></span><br><span class="line"><span class="comment"># 进入同级目录basic-network</span></span><br><span class="line"><span class="built_in">cd</span> ../basic-network</span><br><span class="line"><span class="comment"># 运行start.sh脚本</span></span><br><span class="line">./start.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Now launch the CLI container in order to install, instantiate chaincode</span></span><br><span class="line"><span class="comment"># and prime the ledger with our 10 cars</span></span><br><span class="line"><span class="comment"># 使用docker-compose 启动cli容器</span></span><br><span class="line">docker-compose -f ./docker-compose.yml up -d cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在cli容器中执行peer chaincode install来安装合约</span></span><br><span class="line">docker <span class="built_in">exec</span> -e <span class="string">"CORE_PEER_LOCALMSPID=Org1MSP"</span> -e <span class="string">"CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp"</span> cli peer chaincode install -n fabcar -v 1.0 -p github.com/fabcar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在cli容器中执行peer chaincode instantiate来初始化合约，这个操作将会调用合约里的Init函数</span></span><br><span class="line"><span class="comment"># -C 指定通道名称</span></span><br><span class="line"><span class="comment"># -c 指定初始化参数</span></span><br><span class="line"><span class="comment"># -P 指定背书策略，这里只要是Org1MSP或Org2MSP任一成员即可</span></span><br><span class="line">docker <span class="built_in">exec</span> -e <span class="string">"CORE_PEER_LOCALMSPID=Org1MSP"</span> -e <span class="string">"CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp"</span> cli peer chaincode instantiate -o orderer.example.com:7050 -C mychannel -n fabcar -v 1.0 -c <span class="string">'&#123;"Args":[""]&#125;'</span> -P <span class="string">"OR ('Org1MSP.member','Org2MSP.member')"</span></span><br><span class="line">sleep 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在cli容器里执行peer chaincode invoke操作来调用合约中的initLedger函数</span></span><br><span class="line">docker <span class="built_in">exec</span> -e <span class="string">"CORE_PEER_LOCALMSPID=Org1MSP"</span> -e <span class="string">"CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp"</span> cli peer chaincode invoke -o orderer.example.com:7050 -C mychannel -n fabcar -c <span class="string">'&#123;"function":"initLedger","Args":[""]&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"\nTotal execution time : <span class="variable">$(($(date +%s)</span> - starttime)) secs ...\n\n"</span></span><br></pre></td></tr></table></figure><p>看一下<em>startFabric.sh*脚本中用到的</em>../basic-network/start.sh*脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Copyright IBM Corp All Rights Reserved</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Exit on first error, print all commands.</span></span><br><span class="line"><span class="built_in">set</span> -ev</span><br><span class="line"></span><br><span class="line"><span class="comment"># don't rewrite paths for Windows Git Bash users</span></span><br><span class="line"><span class="built_in">export</span> MSYS_NO_PATHCONV=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据docker-compose.yml文件停止相关的容器</span></span><br><span class="line">docker-compose -f docker-compose.yml down</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据docker-compose.yml文件启动如下容器：</span></span><br><span class="line"><span class="comment"># ca.example.com容器提供CA认证服务</span></span><br><span class="line"><span class="comment"># orderer.example.com提供排序(共识)服务</span></span><br><span class="line"><span class="comment"># peer0.org1.example.com提供背书和账本服务，</span></span><br><span class="line"><span class="comment"># couchdb作为Key-Value服务来存储区块链状态(world state)</span></span><br><span class="line">docker-compose -f docker-compose.yml up -d ca.example.com orderer.example.com peer0.org1.example.com couchdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># wait for Hyperledger Fabric to start</span></span><br><span class="line"><span class="comment"># incase of errors when running later commands, issue export FABRIC_START_TIMEOUT=&lt;larger number&gt;</span></span><br><span class="line"><span class="built_in">export</span> FABRIC_START_TIMEOUT=10</span><br><span class="line"><span class="comment">#echo $&#123;FABRIC_START_TIMEOUT&#125;</span></span><br><span class="line">sleep <span class="variable">$&#123;FABRIC_START_TIMEOUT&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the channel</span></span><br><span class="line"><span class="comment"># 创建通道</span></span><br><span class="line">docker <span class="built_in">exec</span> -e <span class="string">"CORE_PEER_LOCALMSPID=Org1MSP"</span> -e <span class="string">"CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@org1.example.com/msp"</span> peer0.org1.example.com peer channel create -o orderer.example.com:7050 -c mychannel -f /etc/hyperledger/configtx/channel.tx</span><br><span class="line"></span><br><span class="line"><span class="comment"># Join peer0.org1.example.com to the channel.</span></span><br><span class="line"><span class="comment"># 将peer1.org1.example.com加入通道</span></span><br><span class="line">docker <span class="built_in">exec</span> -e <span class="string">"CORE_PEER_LOCALMSPID=Org1MSP"</span> -e <span class="string">"CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@org1.example.com/msp"</span> peer0.org1.example.com peer channel join -b mychannel.block</span><br></pre></td></tr></table></figure></li></ol><p>4) ### 智能合约关键内容解释</p><p>   合约代码在<em>../chaincode/fabcar/fabcar.go</em>文件中定义，</p>   <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Imports</span></span><br><span class="line"><span class="comment"> * 4 utility libraries for formatting, handling bytes, reading and writing JSON, and string manipulation</span></span><br><span class="line"><span class="comment"> * 2 specific Hyperledger Fabric specific libraries for Smart Contracts</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bytes"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/hyperledger/fabric/core/chaincode/shim"</span></span><br><span class="line">sc <span class="string">"github.com/hyperledger/fabric/protos/peer"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// Define the Smart Contract structure</span></span><br><span class="line"><span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define the car structure, with 4 properties.  Structure tags are used by encoding/json library</span></span><br><span class="line"><span class="keyword">type</span> Car <span class="keyword">struct</span> &#123;</span><br><span class="line">Make   <span class="keyword">string</span> <span class="string">`json:"make"`</span></span><br><span class="line">Model  <span class="keyword">string</span> <span class="string">`json:"model"`</span></span><br><span class="line">Colour <span class="keyword">string</span> <span class="string">`json:"colour"`</span></span><br><span class="line">Owner  <span class="keyword">string</span> <span class="string">`json:"owner"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The Init method is called when the Smart Contract "fabcar" is instantiated by the blockchain network</span></span><br><span class="line"><span class="comment"> * Best practice is to have any Ledger initialization in separate function -- see initLedger()</span></span><br><span class="line"><span class="comment"> * 合约初始化函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">Init</span><span class="params">(APIstub shim.ChaincodeStubInterface)</span> <span class="title">sc</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Success(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The Invoke method is called as a result of an application request to run the Smart Contract "fabcar"</span></span><br><span class="line"><span class="comment"> * The calling application program has also specified the particular smart contract function to be called, with arguments</span></span><br><span class="line"><span class="comment"> * 查询和更新账本的入口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">Invoke</span><span class="params">(APIstub shim.ChaincodeStubInterface)</span> <span class="title">sc</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Retrieve the requested Smart Contract function and arguments</span></span><br><span class="line">function, args := APIstub.GetFunctionAndParameters()</span><br><span class="line"><span class="comment">// Route to the appropriate handler function to interact with the ledger appropriately</span></span><br><span class="line"><span class="comment">// 根据传入的函数名称调用对应的代码</span></span><br><span class="line"><span class="keyword">if</span> function == <span class="string">"queryCar"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.queryCar(APIstub, args)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> function == <span class="string">"initLedger"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.initLedger(APIstub)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> function == <span class="string">"createCar"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.createCar(APIstub, args)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> function == <span class="string">"queryAllCars"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.queryAllCars(APIstub)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> function == <span class="string">"changeCarOwner"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.changeCarOwner(APIstub, args)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> shim.Error(<span class="string">"Invalid Smart Contract function name."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 根据轿车ID查询某一辆轿车的信息，轿车ID存放在传入args[0]中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">queryCar</span><span class="params">(APIstub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="title">sc</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) != <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(<span class="string">"Incorrect number of arguments. Expecting 1"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">carAsBytes, _ := APIstub.GetState(args[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> shim.Success(carAsBytes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 初始化账本，存入10台轿车数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">initLedger</span><span class="params">(APIstub shim.ChaincodeStubInterface)</span> <span class="title">sc</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line">cars := []Car&#123;</span><br><span class="line">Car&#123;Make: <span class="string">"Toyota"</span>, Model: <span class="string">"Prius"</span>, Colour: <span class="string">"blue"</span>, Owner: <span class="string">"Tomoko"</span>&#125;,</span><br><span class="line">Car&#123;Make: <span class="string">"Ford"</span>, Model: <span class="string">"Mustang"</span>, Colour: <span class="string">"red"</span>, Owner: <span class="string">"Brad"</span>&#125;,</span><br><span class="line">Car&#123;Make: <span class="string">"Hyundai"</span>, Model: <span class="string">"Tucson"</span>, Colour: <span class="string">"green"</span>, Owner: <span class="string">"Jin Soo"</span>&#125;,</span><br><span class="line">Car&#123;Make: <span class="string">"Volkswagen"</span>, Model: <span class="string">"Passat"</span>, Colour: <span class="string">"yellow"</span>, Owner: <span class="string">"Max"</span>&#125;,</span><br><span class="line">Car&#123;Make: <span class="string">"Tesla"</span>, Model: <span class="string">"S"</span>, Colour: <span class="string">"black"</span>, Owner: <span class="string">"Adriana"</span>&#125;,</span><br><span class="line">Car&#123;Make: <span class="string">"Peugeot"</span>, Model: <span class="string">"205"</span>, Colour: <span class="string">"purple"</span>, Owner: <span class="string">"Michel"</span>&#125;,</span><br><span class="line">Car&#123;Make: <span class="string">"Chery"</span>, Model: <span class="string">"S22L"</span>, Colour: <span class="string">"white"</span>, Owner: <span class="string">"Aarav"</span>&#125;,</span><br><span class="line">Car&#123;Make: <span class="string">"Fiat"</span>, Model: <span class="string">"Punto"</span>, Colour: <span class="string">"violet"</span>, Owner: <span class="string">"Pari"</span>&#125;,</span><br><span class="line">Car&#123;Make: <span class="string">"Tata"</span>, Model: <span class="string">"Nano"</span>, Colour: <span class="string">"indigo"</span>, Owner: <span class="string">"Valeria"</span>&#125;,</span><br><span class="line">Car&#123;Make: <span class="string">"Holden"</span>, Model: <span class="string">"Barina"</span>, Colour: <span class="string">"brown"</span>, Owner: <span class="string">"Shotaro"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="built_in">len</span>(cars) &#123;</span><br><span class="line">fmt.Println(<span class="string">"i is "</span>, i)</span><br><span class="line">carAsBytes, _ := json.Marshal(cars[i])</span><br><span class="line">APIstub.PutState(<span class="string">"CAR"</span>+strconv.Itoa(i), carAsBytes)</span><br><span class="line">fmt.Println(<span class="string">"Added"</span>, cars[i])</span><br><span class="line">i = i + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> shim.Success(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在账本中添加一辆新轿车，轿车信息由args参数传入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">createCar</span><span class="params">(APIstub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="title">sc</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) != <span class="number">5</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(<span class="string">"Incorrect number of arguments. Expecting 5"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = Car&#123;Make: args[<span class="number">1</span>], Model: args[<span class="number">2</span>], Colour: args[<span class="number">3</span>], Owner: args[<span class="number">4</span>]&#125;</span><br><span class="line"></span><br><span class="line">carAsBytes, _ := json.Marshal(car)</span><br><span class="line">APIstub.PutState(args[<span class="number">0</span>], carAsBytes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> shim.Success(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 查询所有轿车信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">queryAllCars</span><span class="params">(APIstub shim.ChaincodeStubInterface)</span> <span class="title">sc</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line"></span><br><span class="line">startKey := <span class="string">"CAR0"</span></span><br><span class="line">endKey := <span class="string">"CAR999"</span></span><br><span class="line"></span><br><span class="line">resultsIterator, err := APIstub.GetStateByRange(startKey, endKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resultsIterator.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// buffer is a JSON array containing QueryResults</span></span><br><span class="line"><span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line">buffer.WriteString(<span class="string">"["</span>)</span><br><span class="line"></span><br><span class="line">bArrayMemberAlreadyWritten := <span class="literal">false</span></span><br><span class="line"><span class="keyword">for</span> resultsIterator.HasNext() &#123;</span><br><span class="line">queryResponse, err := resultsIterator.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Add a comma before array members, suppress it for the first array member</span></span><br><span class="line"><span class="keyword">if</span> bArrayMemberAlreadyWritten == <span class="literal">true</span> &#123;</span><br><span class="line">buffer.WriteString(<span class="string">","</span>)</span><br><span class="line">&#125;</span><br><span class="line">buffer.WriteString(<span class="string">"&#123;\"Key\":"</span>)</span><br><span class="line">buffer.WriteString(<span class="string">"\""</span>)</span><br><span class="line">buffer.WriteString(queryResponse.Key)</span><br><span class="line">buffer.WriteString(<span class="string">"\""</span>)</span><br><span class="line"></span><br><span class="line">buffer.WriteString(<span class="string">", \"Record\":"</span>)</span><br><span class="line"><span class="comment">// Record is a JSON object, so we write as-is</span></span><br><span class="line">buffer.WriteString(<span class="keyword">string</span>(queryResponse.Value))</span><br><span class="line">buffer.WriteString(<span class="string">"&#125;"</span>)</span><br><span class="line">bArrayMemberAlreadyWritten = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">buffer.WriteString(<span class="string">"]"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"- queryAllCars:\n%s\n"</span>, buffer.String())</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> shim.Success(buffer.Bytes())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 修改某一轿车的车主，轿车ID和车主信息args参数传入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">changeCarOwner</span><span class="params">(APIstub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="title">sc</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) != <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(<span class="string">"Incorrect number of arguments. Expecting 2"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">carAsBytes, _ := APIstub.GetState(args[<span class="number">0</span>])</span><br><span class="line">car := Car&#123;&#125;</span><br><span class="line"></span><br><span class="line">json.Unmarshal(carAsBytes, &amp;car)</span><br><span class="line">car.Owner = args[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">carAsBytes, _ = json.Marshal(car)</span><br><span class="line">APIstub.PutState(args[<span class="number">0</span>], carAsBytes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> shim.Success(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The main function is only relevant in unit test mode. Only included here for completeness.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a new Smart Contract</span></span><br><span class="line">err := shim.Start(<span class="built_in">new</span>(SmartContract))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Error creating new Smart Contract: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   fabric 使用 go 语言来编写智能合约，使用 docker 容器来运行合约代码。每份合约只需要实现如下接口</p>   <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Chaincode <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 合约初始时被调用，即在执行peer chaincode instantiate命令时调用且仅调用一次</span></span><br><span class="line">Init(stub ChaincodeStubInterface) pb.Response</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke 用来查询或更新账本状态</span></span><br><span class="line">Invoke(stub ChaincodeStubInterface) pb.Response</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   可以将 fabric 的账本(world state)理解为一个 Key-Value 数据库或是 map(对象，字典等)，这也是为什么可以使用<a href="http://couchdb.apache.org/" target="_blank" rel="noopener">couchdb</a>的原因，合约的主要功能就是与这个数据库打交道，如：</p><ul><li>APIstub.GetState(key) 读取 Key 对应的 Value</li><li>APIstub.PutState(key, value)，将 key-value 值对写入数据库中</li></ul><p>5) ### 调用合约功能</p><p>   区块链网络已经启动，合约也已经部署好，现在来看看如何访问合约中的功能，先看看 query.js，其他的 js 文件如 invoke.js 程序结构相似。</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright IBM Corp All Rights Reserved</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Hyperledger Fabric Sample Query Program</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// nodejs的fabric客户端</span></span><br><span class="line"><span class="keyword">var</span> hfc = <span class="built_in">require</span>(<span class="string">"fabric-client"</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相关配置参数</span></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  wallet_path: path.join(__dirname, <span class="string">"./creds"</span>),</span><br><span class="line">  user_id: <span class="string">"PeerAdmin"</span>,</span><br><span class="line">  channel_id: <span class="string">"mychannel"</span>,</span><br><span class="line">  chaincode_id: <span class="string">"fabcar"</span>,</span><br><span class="line">  network_url: <span class="string">"grpc://localhost:7051"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> channel = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> client = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve()</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Create a client and set the wallet location"</span>);</span><br><span class="line">    <span class="comment">// 初始化新的fabric客户端</span></span><br><span class="line">    client = <span class="keyword">new</span> hfc();</span><br><span class="line">    <span class="comment">// 设置客户端证书缓存位置，连接时首先要经过CA认证，客户端会缓存用户的认证信息</span></span><br><span class="line">    <span class="keyword">return</span> hfc.newDefaultKeyValueStore(&#123; <span class="attr">path</span>: options.wallet_path &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">wallet</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">"Set wallet path, and associate user "</span>,</span><br><span class="line">      options.user_id,</span><br><span class="line">      <span class="string">" with application"</span></span><br><span class="line">    );</span><br><span class="line">    client.setStateStore(wallet);</span><br><span class="line">    <span class="comment">// 获取用户对应的信息</span></span><br><span class="line">    <span class="keyword">return</span> client.getUserContext(options.user_id, <span class="literal">true</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">"Check user is enrolled, and set a query URL in the network"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (user === <span class="literal">undefined</span> || user.isEnrolled() === <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="comment">// 用户认证失败</span></span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">"User not defined, or not enrolled - error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 新建通道</span></span><br><span class="line">    channel = client.newChannel(options.channel_id);</span><br><span class="line">    <span class="comment">// 将节点加入通道中</span></span><br><span class="line">    channel.addPeer(client.newPeer(options.network_url));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Make query"</span>);</span><br><span class="line">    <span class="comment">// 构造交易ID</span></span><br><span class="line">    <span class="keyword">var</span> transaction_id = client.newTransactionID();</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">"Assigning transaction_id: "</span>,</span><br><span class="line">      transaction_id._transaction_id</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// queryCar - requires 1 argument, ex: args: ['CAR4'],</span></span><br><span class="line">    <span class="comment">// queryAllCars - requires no arguments , ex: args: [''],</span></span><br><span class="line">    <span class="comment">// 构造区块链请求结构体</span></span><br><span class="line">    <span class="keyword">const</span> request = &#123;</span><br><span class="line">      <span class="comment">// 合约ID</span></span><br><span class="line">      chaincodeId: options.chaincode_id,</span><br><span class="line">      <span class="comment">// 交易ID</span></span><br><span class="line">      txId: transaction_id,</span><br><span class="line">      <span class="comment">// 要调用的合约函数名</span></span><br><span class="line">      fcn: <span class="string">"queryAllCars"</span>,</span><br><span class="line">      <span class="comment">// 传递给合约函数的参数</span></span><br><span class="line">      args: [<span class="string">""</span>],</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 发起合约调用</span></span><br><span class="line">    <span class="keyword">return</span> channel.queryByChaincode(request);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">query_responses</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 合约调用结果返回</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"returned from query"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!query_responses.length) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"No payloads were returned from query"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Query result count = "</span>, query_responses.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (query_responses[<span class="number">0</span>] <span class="keyword">instanceof</span> <span class="built_in">Error</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">"error from query = "</span>, query_responses[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Response is "</span>, query_responses[<span class="number">0</span>].toString());</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Caught Error"</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>6) ### 总结</p><p>   看到这里，是不是已经懵了:(</p><p>   想用区块链写个合约是不是好麻烦啊，要用到 docker，还要会 go，再来点 Nodejs，好难啊。。。想必 hyperledger 社区也意识到了这个问题，所以他们推出了<a href="https://hyperledger.github.io/composer/" target="_blank" rel="noopener">Hyperledger Composer</a>项目，不用专门学 go——其实学 go 也没坏处:)，composer 主页上介绍说可以将开发时间变成以周为单位，而不是月为单位。后续会推出<a href="https://hyperledger.github.io/composer/" target="_blank" rel="noopener">Hyperledger Composer</a>相关文章，敬请关注。</p><ol start="7"><li><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><a href="http://hyperledger-fabric.readthedocs.io/en/latest/write_first_app.html" target="_blank" rel="noopener">hyperledger fabric write first application</a><br><a href="https://github.com/hyperledger/fabric-sdk-node" target="_blank" rel="noopener">fabric-client 代码库</a><br><a href="https://fabric-sdk-node.github.io/" target="_blank" rel="noopener">fabric-client-api 文档</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;本文基本 hyperledger fabric 区块链网络，编写一个简单的应用，旨在讲述以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="blockchain" scheme="http://marryton007.github.io/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="http://marryton007.github.io/tags/blockchain/"/>
    
      <category term="hyperledger" scheme="http://marryton007.github.io/tags/hyperledger/"/>
    
      <category term="fabric" scheme="http://marryton007.github.io/tags/fabric/"/>
    
  </entry>
  
  <entry>
    <title>使用hyperledger fabric构建你的第一个区块链网络</title>
    <link href="http://marryton007.github.io/2017/08/22/blockchain/build-first-fabric-network/"/>
    <id>http://marryton007.github.io/2017/08/22/blockchain/build-first-fabric-network/</id>
    <published>2017-08-22T06:17:39.000Z</published>
    <updated>2022-05-21T02:53:38.016Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://hyperledger-fabric.readthedocs.io/en/latest/build_network.html" target="_blank" rel="noopener">官方文档参考</a></p><p>摘要：本文仅描述在单台 mac 机器上使用 docker 创建一个 fabric 区块链网络</p><ol><li><h4 id="安装依赖工具"><a href="#安装依赖工具" class="headerlink" title="安装依赖工具"></a>安装依赖工具</h4><ul><li><a href="https://curl.haxx.se/download.html" target="_blank" rel="noopener">cURL</a></li><li><a href="https://www.docker.com/products/overview" target="_blank" rel="noopener">docker</a> 17.03.1-ce 以上, 建议安装 docker for mac</li><li>docker-compose</li><li><a href="https://golang.org" target="_blank" rel="noopener">go</a> 1.7.x</li><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs</a> 6.9.x</li></ul></li><li><h4 id="下载-fabric-sample-项目"><a href="#下载-fabric-sample-项目" class="headerlink" title="下载 fabric sample 项目"></a>下载 fabric sample 项目</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir  <span class="variable">$HOME</span>/work</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/work</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/hyperledger/fabric-samples.git</span><br><span class="line"><span class="built_in">cd</span> fabric-samples</span><br><span class="line">git checkout -b release</span><br></pre></td></tr></table></figure><blockquote><p>将源代码切换到 release 分支比较好，master 分支可能会有隐藏的 bug。</p></blockquote></li><li><h4 id="下载平台相关的二进制文件和-docker-镜像文件"><a href="#下载平台相关的二进制文件和-docker-镜像文件" class="headerlink" title="下载平台相关的二进制文件和 docker 镜像文件"></a>下载平台相关的二进制文件和 docker 镜像文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/work</span><br><span class="line">curl -sSL https://goo.gl/eYdRbX -o fabric-samples.sh</span><br></pre></td></tr></table></figure><p>脚本内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Copyright IBM Corp. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> VERSION=1.0.1</span><br><span class="line"><span class="built_in">export</span> ARCH=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$(uname -s|tr '[:upper:]' '[:lower:]'|sed 's/mingw64_nt.*/windows/')</span>-<span class="variable">$(uname -m | sed 's/x86_64/amd64/g')</span>"</span> | awk <span class="string">'&#123;print tolower($0)&#125;'</span>)</span><br><span class="line"><span class="comment">#Set MARCH variable i.e ppc64le,s390x,x86_64,i386</span></span><br><span class="line">MARCH=`uname -m`</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">dockerFabricPull</span></span>() &#123;</span><br><span class="line">  <span class="built_in">local</span> FABRIC_TAG=<span class="variable">$1</span></span><br><span class="line">  <span class="keyword">for</span> IMAGES <span class="keyword">in</span> peer orderer couchdb ccenv javaenv kafka zookeeper tools; <span class="keyword">do</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"==&gt; FABRIC IMAGE: <span class="variable">$IMAGES</span>"</span></span><br><span class="line">      <span class="built_in">echo</span></span><br><span class="line">      docker pull hyperledger/fabric-<span class="variable">$IMAGES</span>:<span class="variable">$FABRIC_TAG</span></span><br><span class="line">      docker tag hyperledger/fabric-<span class="variable">$IMAGES</span>:<span class="variable">$FABRIC_TAG</span> hyperledger/fabric-<span class="variable">$IMAGES</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">dockerCaPull</span></span>() &#123;</span><br><span class="line">      <span class="built_in">local</span> CA_TAG=<span class="variable">$1</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"==&gt; FABRIC CA IMAGE"</span></span><br><span class="line">      <span class="built_in">echo</span></span><br><span class="line">      docker pull hyperledger/fabric-ca:<span class="variable">$CA_TAG</span></span><br><span class="line">      docker tag hyperledger/fabric-ca:<span class="variable">$CA_TAG</span> hyperledger/fabric-ca</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">: <span class="variable">$&#123;CA_TAG:="$MARCH-$VERSION"&#125;</span></span><br><span class="line">: <span class="variable">$&#123;FABRIC_TAG:="$MARCH-$VERSION"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"===&gt; Downloading platform binaries"</span></span><br><span class="line">curl https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/<span class="variable">$&#123;ARCH&#125;</span>-<span class="variable">$&#123;VERSION&#125;</span>/hyperledger-fabric-<span class="variable">$&#123;ARCH&#125;</span>-<span class="variable">$&#123;VERSION&#125;</span>.tar.gz | tar xz</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"===&gt; Pulling fabric Images"</span></span><br><span class="line">dockerFabricPull <span class="variable">$&#123;FABRIC_TAG&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"===&gt; Pulling fabric ca Image"</span></span><br><span class="line">dockerCaPull <span class="variable">$&#123;CA_TAG&#125;</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"===&gt; List out hyperledger docker images"</span></span><br><span class="line">docker images | grep hyperledger*</span><br></pre></td></tr></table></figure><p>该脚本会下载一些平台相关的二进制文件，如 cryptogen、configtxgen 等，下载的二进制文件会放在 bin 目录下，注意将该目录加入系统环境变量 PATH 中，如下设置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/work</span><br><span class="line">sh ./fabric-samples.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export PATH="</span><span class="variable">$HOME</span>/work/bin:<span class="variable">$PATH</span><span class="string">""</span> &gt;&gt; <span class="variable">$HOME</span>/.profile</span><br></pre></td></tr></table></figure><p>同时，脚本还会下载相关的 docker 镜像，如 hyperledger/fabric-peer, hyperledger/fabric-orderer 等，下载镜像过程可能会比较慢，建议使用<a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">daocloud</a>或是阿里云加速</p></li><li><h3 id="获取区块链建链脚本帮助文档"><a href="#获取区块链建链脚本帮助文档" class="headerlink" title="获取区块链建链脚本帮助文档"></a>获取区块链建链脚本帮助文档</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/work/fabric-samples/first-network</span><br><span class="line">./byfn.sh -h</span><br><span class="line">Usage:</span><br><span class="line">  byfn.sh -m up|down|restart|generate [-c &lt;channel name&gt;] [-t &lt;timeout&gt;]</span><br><span class="line">  byfn.sh -h|--<span class="built_in">help</span> (<span class="built_in">print</span> this message)</span><br><span class="line">    -m &lt;mode&gt; - one of <span class="string">'up'</span>, <span class="string">'down'</span>, <span class="string">'restart'</span> or <span class="string">'generate'</span></span><br><span class="line">      - <span class="string">'up'</span> - bring up the network with docker-compose up</span><br><span class="line">      - <span class="string">'down'</span> - clear the network with docker-compose down</span><br><span class="line">      - <span class="string">'restart'</span> - restart the network</span><br><span class="line">      - <span class="string">'generate'</span> - generate required certificates and genesis block</span><br><span class="line">    -c &lt;channel name&gt; - config name to use (defaults to <span class="string">"mychannel"</span>)</span><br><span class="line">    -t &lt;timeout&gt; - CLI timeout duration <span class="keyword">in</span> microseconds (defaults to 10000)</span><br><span class="line"></span><br><span class="line">Typically, one would first generate the required certificates and</span><br><span class="line">genesis block, <span class="keyword">then</span> bring up the network. e.g.:</span><br><span class="line"></span><br><span class="line">  byfn.sh -m generate -c &lt;channelname&gt;</span><br><span class="line">  byfn.sh -m up -c &lt;channelname&gt;</span><br></pre></td></tr></table></figure></li><li><h3 id="生成相关证书-启动和停止区块链网络"><a href="#生成相关证书-启动和停止区块链网络" class="headerlink" title="生成相关证书,启动和停止区块链网络"></a>生成相关证书,启动和停止区块链网络</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./byfn.sh -m generate</span><br><span class="line">./byfn.sh -m up</span><br><span class="line">./byfn.sh -m down</span><br></pre></td></tr></table></figure><ul><li>generate 的作用:<ul><li>调用 cryptogen 生成证书树，在区块链的运作过程中，每个节点都要使用证书对自己所生成的内容进行签名，其他节点都也需要证书对数据进行验证。</li><li>调用 configtxgen 生成‘上帝区块’和‘通道初始信息’</li></ul></li><li>up，使用 docker-compose 启动区块链网络</li><li>down,停止区块链网络</li></ul></li></ol><p>6) ### 相关名词解释</p><ul><li>peer，节点，区块链组网基本单元，主要作用：<ul><li>负责对客户端发起的交易进行背书</li><li>记账</li></ul></li><li>anchor peer，锚(主)节点，用来跨组织进行通信的节点</li><li>orderer, 排序节点，通过对客户端发起的交易进行排序，其结果将发布到 peer 进行记账，orderer 节点是区块链共识算法的主要执行者，orderer 节点依据共识算法的不同，可以是 1 台机器，也可以是多台机器组成共识网络，fabric 支持集成 kafka、zookeeper 等</li><li>channel, 通道，更好的说法是‘子账本’，在一个区块链网络中，允许存在多个子账本，子账本之间互相隔离，一个通道里可以包含多个 peer 和 order。</li><li>ca，fabric 的认证授权管理，支持基于数据库和<a href="https://segmentfault.com/a/1190000002607140" target="_blank" rel="noopener">LDAP</a>认证的方法</li><li>genesis block, 上帝区块，链中第 1 个区块</li><li><a href="http://hyperledger-fabric.readthedocs.io/en/latest/msp.html" target="_blank" rel="noopener">msp</a>， 成员服务提供商</li></ul><p>7) ### crypto-config.yaml 文件说明</p>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Orderer</span></span><br><span class="line">  <span class="attr">Domain:</span> <span class="string">example.com</span></span><br><span class="line">  <span class="attr">Specs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">Hostname:</span> <span class="string">orderer</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Org1</span></span><br><span class="line">  <span class="attr">Domain:</span> <span class="string">org1.example.com</span></span><br><span class="line">  <span class="attr">Template:</span></span><br><span class="line">    <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">Users:</span></span><br><span class="line">    <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Org2</span></span><br><span class="line">  <span class="attr">Domain:</span> <span class="string">org2.example.com</span></span><br><span class="line">  <span class="attr">Template:</span></span><br><span class="line">    <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">Users:</span></span><br><span class="line">    <span class="attr">Count:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>   crypto-config.yaml 文件是 cryptogen 的配置文件，crypto-config.yaml 文件定义了整个 fabric 网络的组织结构。有如下关键因素。</p>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">*</span> <span class="string">OrdererOrgs</span>  <span class="string">定义orderer组织结构</span></span><br><span class="line">    <span class="string">*</span>  <span class="string">Name</span> <span class="string">组织名称</span></span><br><span class="line">    <span class="string">*</span>  <span class="string">Domain</span> <span class="string">组织域名</span></span><br><span class="line">    <span class="string">*</span>  <span class="string">Specs</span>  <span class="string">显示定义组织</span></span><br><span class="line">        <span class="string">*</span>  <span class="string">Hostname</span> <span class="string">主机名称，与组织域名一起构成orderer全名</span></span><br><span class="line">        <span class="string">*</span>  <span class="string">CommonName</span> <span class="string">自定义主机名称，覆盖默认名称</span></span><br><span class="line"></span><br><span class="line"><span class="string">*</span> <span class="string">PeerOrgs</span>  <span class="string">定义peer组织结构</span></span><br><span class="line">    <span class="string">*</span>  <span class="string">Name</span> <span class="string">组织名称</span></span><br><span class="line">    <span class="string">*</span>  <span class="string">Domain</span> <span class="string">组织域名</span></span><br><span class="line">    <span class="string">*</span>  <span class="string">Specs</span>  <span class="string">同OrdererOrgs</span></span><br><span class="line">    <span class="string">*</span>  <span class="string">Template</span>  <span class="string">以模板形式定义组织</span></span><br><span class="line">        <span class="string">*</span>  <span class="string">Count</span> <span class="string">定义在该组织下peer节点数量，每个peer节点名称形如：peer[0-count-1].Domain</span></span><br><span class="line">    <span class="string">*</span> <span class="string">Users</span>  <span class="string">定义用户</span></span><br><span class="line">        <span class="string">*</span>  <span class="string">Count</span> <span class="string">定义除了Admin之外用户数，每个用户名称形如User[1-count]@Domain</span></span><br></pre></td></tr></table></figure><p>8) ### configtx.yaml</p>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright IBM Corp. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Profile</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - Different configuration profiles may be encoded here to be specified</span></span><br><span class="line"><span class="comment">#   as parameters to the configtxgen tool</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Profiles:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">TwoOrgsOrdererGenesis:</span></span><br><span class="line">        <span class="attr">Orderer:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*OrdererOrg</span></span><br><span class="line">        <span class="attr">Consortiums:</span></span><br><span class="line">            <span class="attr">SampleConsortium:</span></span><br><span class="line">                <span class="attr">Organizations:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="meta">*Org2</span></span><br><span class="line">    <span class="attr">TwoOrgsChannel:</span></span><br><span class="line">        <span class="attr">Consortium:</span> <span class="string">SampleConsortium</span></span><br><span class="line">        <span class="attr">Application:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Section: Organizations</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section defines the different organizational identities which will</span></span><br><span class="line"><span class="comment">#   be referenced later in the configuration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Organizations:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># SampleOrg defines an MSP using the sampleconfig.  It should never be used</span></span><br><span class="line">    <span class="comment"># in production but may be used as a template for other definitions</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">&amp;OrdererOrg</span></span><br><span class="line">        <span class="comment"># DefaultOrg defines the organization which is used in the sampleconfig</span></span><br><span class="line">        <span class="comment"># of the fabric.git development environment</span></span><br><span class="line">        <span class="attr">Name:</span> <span class="string">OrdererOrg</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ID to load the MSP definition as</span></span><br><span class="line">        <span class="attr">ID:</span> <span class="string">OrdererMSP</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># MSPDir is the filesystem path which contains the MSP configuration</span></span><br><span class="line">        <span class="attr">MSPDir:</span> <span class="string">crypto-config/ordererOrganizations/example.com/msp</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">&amp;Org1</span></span><br><span class="line">        <span class="comment"># DefaultOrg defines the organization which is used in the sampleconfig</span></span><br><span class="line">        <span class="comment"># of the fabric.git development environment</span></span><br><span class="line">        <span class="attr">Name:</span> <span class="string">Org1MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ID to load the MSP definition as</span></span><br><span class="line">        <span class="attr">ID:</span> <span class="string">Org1MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">MSPDir:</span> <span class="string">crypto-config/peerOrganizations/org1.example.com/msp</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">AnchorPeers:</span></span><br><span class="line">            <span class="comment"># AnchorPeers defines the location of peers which can be used</span></span><br><span class="line">            <span class="comment"># for cross org gossip communication.  Note, this value is only</span></span><br><span class="line">            <span class="comment"># encoded in the genesis block in the Application section context</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">peer0.org1.example.com</span></span><br><span class="line">              <span class="attr">Port:</span> <span class="number">7051</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">&amp;Org2</span></span><br><span class="line">        <span class="comment"># DefaultOrg defines the organization which is used in the sampleconfig</span></span><br><span class="line">        <span class="comment"># of the fabric.git development environment</span></span><br><span class="line">        <span class="attr">Name:</span> <span class="string">Org2MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ID to load the MSP definition as</span></span><br><span class="line">        <span class="attr">ID:</span> <span class="string">Org2MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">MSPDir:</span> <span class="string">crypto-config/peerOrganizations/org2.example.com/msp</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">AnchorPeers:</span></span><br><span class="line">            <span class="comment"># AnchorPeers defines the location of peers which can be used</span></span><br><span class="line">            <span class="comment"># for cross org gossip communication.  Note, this value is only</span></span><br><span class="line">            <span class="comment"># encoded in the genesis block in the Application section context</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">peer0.org2.example.com</span></span><br><span class="line">              <span class="attr">Port:</span> <span class="number">7051</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   SECTION: Orderer</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section defines the values to encode into a config transaction or</span></span><br><span class="line"><span class="comment">#   genesis block for orderer related parameters</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Orderer:</span> <span class="meta">&amp;OrdererDefaults</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Orderer Type: The orderer implementation to start</span></span><br><span class="line">    <span class="comment"># Available types are "solo" and "kafka"</span></span><br><span class="line">    <span class="attr">OrdererType:</span> <span class="string">solo</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Addresses:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">orderer.example.com:7050</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Batch Timeout: The amount of time to wait before creating a batch</span></span><br><span class="line">    <span class="attr">BatchTimeout:</span> <span class="string">2s</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Batch Size: Controls the number of messages batched into a block</span></span><br><span class="line">    <span class="attr">BatchSize:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Max Message Count: The maximum number of messages to permit in a batch</span></span><br><span class="line">        <span class="attr">MaxMessageCount:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Absolute Max Bytes: The absolute maximum number of bytes allowed for</span></span><br><span class="line">        <span class="comment"># the serialized messages in a batch.</span></span><br><span class="line">        <span class="attr">AbsoluteMaxBytes:</span> <span class="number">99</span> <span class="string">MB</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Preferred Max Bytes: The preferred maximum number of bytes allowed for</span></span><br><span class="line">        <span class="comment"># the serialized messages in a batch. A message larger than the preferred</span></span><br><span class="line">        <span class="comment"># max bytes will result in a batch larger than preferred max bytes.</span></span><br><span class="line">        <span class="attr">PreferredMaxBytes:</span> <span class="number">512</span> <span class="string">KB</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Kafka:</span></span><br><span class="line">        <span class="comment"># Brokers: A list of Kafka brokers to which the orderer connects</span></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> Use IP:port notation</span></span><br><span class="line">        <span class="attr">Brokers:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9092</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Organizations is the list of orgs which are defined as participants on</span></span><br><span class="line">    <span class="comment"># the orderer side of the network</span></span><br><span class="line">    <span class="attr">Organizations:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   SECTION: Application</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section defines the values to encode into a config transaction or</span></span><br><span class="line"><span class="comment">#   genesis block for application related parameters</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Application:</span> <span class="meta">&amp;ApplicationDefaults</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Organizations is the list of orgs which are defined as participants on</span></span><br><span class="line">    <span class="comment"># the application side of the network</span></span><br><span class="line">    <span class="attr">Organizations:</span></span><br></pre></td></tr></table></figure><p>   configtxgen 根据 configtx.yaml 的配置来生成‘上帝区块’和‘channel’信息，上例中定义了 2 个配置。</p>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">*</span> <span class="string">TwoOrgsOrdererGenesis</span> <span class="string">第1个配置名称，一般取比较有意义的名字，这里意思是包含2个组织的上帝区块配置说明</span></span><br><span class="line">    <span class="string">*</span> <span class="string">Orderer</span> <span class="string">排序(共识)选项</span></span><br><span class="line">        <span class="string">*</span> <span class="string">&lt;&lt;:</span> <span class="string">*OrdererDefaults</span> <span class="string">&lt;&lt;是yaml语法，表示引入OrdererDefaults的定义</span></span><br><span class="line">        <span class="string">*</span> <span class="string">Organizations</span> <span class="string">组织选项</span></span><br><span class="line">            <span class="string">*</span> <span class="string">OrdererOrg</span>  <span class="string">引入OrdererOrg定义</span></span><br><span class="line">    <span class="string">*</span> <span class="string">Consortiums</span> <span class="string">多组织联合信息</span></span><br><span class="line">        <span class="string">*</span> <span class="string">SampleConsortium</span> <span class="string">联合名称</span></span><br><span class="line">        <span class="string">*</span> <span class="string">Organizations</span> <span class="string">联合中的组织列表</span></span><br><span class="line"></span><br><span class="line"><span class="string">*</span> <span class="string">TwoOrgsChannel</span> <span class="string">第2个配置名称，包含2个组织的通道说明</span></span><br><span class="line">    <span class="string">*</span> <span class="string">Consortium</span> <span class="string">组织联合信息</span></span><br><span class="line">    <span class="string">*</span> <span class="string">Application</span></span><br><span class="line">        <span class="string">*</span> <span class="string">&lt;&lt;:</span> <span class="string">*ApplicationDefaults</span>  <span class="string">引入应用的定义</span></span><br><span class="line">        <span class="string">*</span> <span class="string">Organizations</span> <span class="string">应用的组织列表</span></span><br></pre></td></tr></table></figure><p>9) ### 总结</p><p>   hyperledger fabric 的工具比较多，概念也不少，理解起来有一定的门槛。个人认为先要理解一些基本概念，再参考<a href="http://hyperledger-fabric.readthedocs.io/en/latest" target="_blank" rel="noopener">官方文档</a>尝试搭建区块链网络，尝试写 1 个合约，尝试与现有系统集成。再深入理解 crypto-config.yaml 和 configtx.yaml 文件，当然，这需要一定的时间和坚持。</p><p>10) ### 免责声明<br>    hyperledger fabric 的配置信息相对还是比较复杂的，且中文文档较少，以上内容只是个人理解，如有错误之处，万望指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://hyperledger-fabric.readthedocs.io/en/latest/build_network.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档参考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;摘要：本文仅描述
      
    
    </summary>
    
    
    
      <category term="blockchain" scheme="http://marryton007.github.io/tags/blockchain/"/>
    
  </entry>
  
  <entry>
    <title>白话区块链</title>
    <link href="http://marryton007.github.io/2017/08/18/blockchain/blockchain-describe/"/>
    <id>http://marryton007.github.io/2017/08/18/blockchain/blockchain-describe/</id>
    <published>2017-08-18T06:17:39.000Z</published>
    <updated>2022-05-21T02:53:38.016Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><pre><code>这里将区块链定义为：分布式的共享账本，具有去中心化、点对点通讯、共识机制、加密算法等特征。</code></pre><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><pre><code>自 2008 年神人**中本聪**发表比特币白皮书以来，人们对比特币背后的区块链技术愈发感兴趣，这也导致区块链技术快速发展。如果说[比特币][bitcoin]代表了第一代区块链技术，那[以太坊][ethereum]可以称之为第二代区块链技术，智能合约的出现将区块链的应用范围大大扩展，不再限于发行、交易数字货币，而是可以应用于各行各业，如金融，博彩，存证等。可以预见，随着区块链技术的发展，去中心化应用将会占据越来越大的空间。</code></pre><h3 id="主要组件"><a href="#主要组件" class="headerlink" title="主要组件"></a>主要组件</h3><pre><code>- 通讯层  通讯层是指区块链网络中各节点间的通讯方式。由于区块链网是一个去中心化的网络，没有特定哪个节点是网络的中心服务器，反而是网络中的每个节点既是客户端，也是服务器，_我为人人，人人为我_，每个节点都是平等的，非常像以前 BT 网络，区块链的底层通讯协议也正是建立在 P2P 协议上。- 数据层  同理，区块链网络中没有特定的中心服务器，那数据是存放在哪的呢？答案是存在每一个节点上，每个节点上的数据都是一样的，是全网同步的，这即是所谓的分布式共享账本。共享的涵义有 2 层，1 是每个节点都可以查看账本，2 是每个节点都可以参与记账。- 共识层  - 什么是共识？共识即某些人对某件事得到统一的结论，在区块链上是对账本的内容达成共识。在区块链网络中，每秒都会发生大量的交易，这些交易能否生效，谁先谁后，如何避免*双花(同 1 笔钱共 2 次)*等，这都是共识要考虑的问题。  - 如何达成共识？这里要依赖共识算法，如典型的共识算法 POW(工作量证明)，什么是工作量证明？在职场中，我们看你有没有学士文凭来验证你是否上过大学，通过查看房间是否卫生来确定是否已经打扫过，这就是工作量证明。在比特币网络中，在所有节点上通过计算[hash 谜题][hash]来竞争，计算[hash 谜题][hash]的过程就是一种工作量证明，只有最快完成工作的节点才拥有记账权，一旦某个节点完成 hash 计算，则本轮竞争结束，重新开始下一个循环。比特币正是由这一个又一个的循环来完成区块链的记账过程的，在每一个循环过程中，最先完成计算，获得记账权的节点会获得一定数量的比特币，这就是在挖矿，这个节点此时叫矿工。</code></pre><h3 id="可选组件"><a href="#可选组件" class="headerlink" title="可选组件"></a>可选组件</h3><pre><code>- 激励层</code></pre><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><pre><code>根据区块链是否公开，可以将区块链私链和公链。    * 公链，任何节点都可以随时加入或退出，一般不需要身份验证，隐私性比较强，如[比特币][bitcoin]，[以太坊] [ethereum]，[小蚁][neo]，因为对节点的身份不做限制，也就是说节点间是互相不信任的    * 私链，私链一般用在数据需要保密，对网络中节点有身份认证的要求，常见于企业与企业之间，或是部门与部门之间，节点之间彼此相信，如[超级账本][hyperledger]。</code></pre><h3 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h3><pre><code>- 什么是智能合约  传统合约是以纸质的形式签订，是否履行也依赖于人的主观性。智能合约本质上是一段电脑程序，合同条款以数字形式保存，在满足一定条件时自动触发执行。可以想像，这种方式将会减少多少*老赖*。- 智能合约用途  - 发行代币，这是区块链的老本行，不能忘。  - 数据上链，比如说存款，链上仅提供设置余额的功能  - 业务上链，还是说存款，链上还要提供存、取功能，取的时候要判断是否余额足够等情况。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;这里将区块链定义为：分布式的共享账本，具有去中心化、点对点通讯、共识机制、加密算法等特征。&lt;/code&gt;&lt;/pre&gt;&lt;h3 
      
    
    </summary>
    
    
      <category term="blockchain" scheme="http://marryton007.github.io/categories/blockchain/"/>
    
    
      <category term="blockchain" scheme="http://marryton007.github.io/tags/blockchain/"/>
    
  </entry>
  
</feed>
